{"tags":[{"name":"GC","permalink":"https://catlittlechen.com/tags/GC/","url":"/async/tags/GC.json","count":2}],"categories":[{"name":"读书笔记","permalink":"https://catlittlechen.com/categories/读书笔记/","url":"/async/categories/读书笔记.json","count":2}],"url":"/async/posts/2016/06/09/垃圾回收的算法与实现-2.json","date":1465461749000,"path":{"year":2016,"month":6,"day":9,"name":"垃圾回收的算法与实现-2"},"title":"垃圾回收的算法与实现(2)","permalink":"https://catlittlechen.com/2016/06/09/垃圾回收的算法与实现-2/","content":"<h2 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h2><h3 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h3><p>新分配的对象 ref 为1<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newObj</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">    obj = malloc(size)</span><br><span class=\"line\">    obj.ref = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">assign</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    obj.ref ++</span><br></pre></td></tr></table></figure>\n<h3 id=\"回收\"><a href=\"#回收\" class=\"headerlink\" title=\"回收\"></a>回收</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    obj.ref --</span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj.ref == <span class=\"number\">0</span>:</span><br><span class=\"line\">        freeObj(obj)</span><br></pre></td></tr></table></figure>\n<h3 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h3><ul>\n<li>垃圾回收快。</li>\n<li>最大暂停时间短。</li>\n<li>引用计数增减有一定消耗，占用一定的大小。</li>\n<li>循环引用无法释放。</li>\n</ul>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><ol>\n<li><p>延迟引用计数法  </p>\n<p> 说白了，就是分配释放的时候，使用数据结构来保存下来，之后一并回收。</p>\n</li>\n<li><p>Sticky引用计数</p>\n<ol>\n<li>固定的计数位长度。  </li>\n<li>如果计数超过了最大，则该对象的引用计数不再改变。  </li>\n<li>用标记-清除算法管理对象。  <ul>\n<li>将所有对象的ref清零。  </li>\n<li>扫描所有对象，增加ref。  </li>\n<li>清除ref为0的数据。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>1位引用计数法</p>\n<p> 计数位为1的Sticky引用计数法。<br> 0 代表引用数为1，1 代表引用数多于1。</p>\n</li>\n<li><p>部分标记-清除算法</p>\n<p> 用两位bit位来标记存在的状态，可以不用扫全部的对象</p>\n</li>\n</ol>\n<h3 id=\"部分标记-清除算法\"><a href=\"#部分标记-清除算法\" class=\"headerlink\" title=\"部分标记-清除算法\"></a>部分标记-清除算法</h3><h4 id=\"标记位\"><a href=\"#标记位\" class=\"headerlink\" title=\"标记位\"></a>标记位</h4><pre><code>2位标记位\n1. black（绝对不是垃圾的对象） \n2. white（绝对是垃圾的对象）\n3. gray（搜索完毕的对象）\n4. hatch（可能是循环垃圾的对象）\n</code></pre><h4 id=\"回收-1\"><a href=\"#回收-1\" class=\"headerlink\" title=\"回收\"></a>回收</h4><p>曾经没减引用的对象，都被认为是可能为循环对象，染色为<code>灰色</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj.ref == <span class=\"number\">0</span>:</span><br><span class=\"line\">        delete(obj)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> obj.color != HATCH:</span><br><span class=\"line\">        obj.color = HATCH</span><br><span class=\"line\">        hatch_queue.push(obj)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"分配-1\"><a href=\"#分配-1\" class=\"headerlink\" title=\"分配\"></a>分配</h4><p>所有分配的对象，标记为都为<code>黑色</code><br>不足以分配的时候，会尝试回收内存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new_obj</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">    obj = pickup_chunk(size)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj <span class=\"keyword\">is</span> NULL:</span><br><span class=\"line\">        obj.color = BLACK</span><br><span class=\"line\">        obj.ref = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hatch_queue.empty():</span><br><span class=\"line\">        scan_hatch_queue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new_obj(size)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> NULL</span><br></pre></td></tr></table></figure></p>\n<p>遍历<code>灰色</code>的对象，尝试开始收集对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scan_hatch_queue</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    obj = hatch.pop()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj.color == HATCH:</span><br><span class=\"line\">        paint_gray(obj)</span><br><span class=\"line\">        scan_gray(obj)</span><br><span class=\"line\">        collect_white(obj)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> hatch_queue.empty():</span><br><span class=\"line\">        scan_hatch_queue()</span><br></pre></td></tr></table></figure></p>\n<p>将对象自身所引用的对象的引用计数-1，循环所有子对象，如果有循环引用，则该对象的引用计数将会被减为1.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">paint_pray</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj.color <span class=\"keyword\">in</span> [BLACK, HATCH]:</span><br><span class=\"line\">        obj.color = GRAY</span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> obj.childs:</span><br><span class=\"line\">            child.ref --</span><br><span class=\"line\">            paint_gray(child)</span><br></pre></td></tr></table></figure></p>\n<p>遍历对象，将引用计数不为0的，即非循环引用的对象还原为<code>黑色</code>，否则，设置为<code>白色</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scan_gray</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj.color == GRAY:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> obj.ref &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            print_black(obj)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            obj.color = WHITE</span><br><span class=\"line\">            <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> obj.childs:</span><br><span class=\"line\">                scan_gray(child)</span><br></pre></td></tr></table></figure></p>\n<p>还原为<code>黑色</code>的过程中，增加对引用对象的计数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">paint_black</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    obj.color = BLACK</span><br><span class=\"line\">    <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> obj.childs:</span><br><span class=\"line\">        child.ref ++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> child.color != BLACK:</span><br><span class=\"line\">            paint_black(child)</span><br></pre></td></tr></table></figure></p>\n<p>将<code>白色</code>对象进行回收，并回收其子对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_white</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> obj.color == WHITE:</span><br><span class=\"line\">        obj.color = BLACK</span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> obj.childs:</span><br><span class=\"line\">            collect_white(child)</span><br><span class=\"line\">    delete(obj)</span><br></pre></td></tr></table></figure></p>\n"}