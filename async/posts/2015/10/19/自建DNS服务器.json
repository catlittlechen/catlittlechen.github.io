{"tags":[{"name":"技术","permalink":"http://catlittlechen.com/tags/技术/","url":"/async/tags/技术.json","count":1}],"categories":[{"name":"折腾","permalink":"http://catlittlechen.com/categories/折腾/","url":"/async/categories/折腾.json","count":2}],"url":"/async/posts/2015/10/19/自建DNS服务器.json","date":1445254893000,"path":{"year":2015,"month":10,"day":19,"name":"自建DNS服务器"},"title":"自建DNS服务器","permalink":"http://catlittlechen.com/2015/10/19/自建DNS服务器/","content":"<p>今天有时间，我想看下自己建立DNS服务器，是怎么样的流程。<br>结果发现是如此的简单。</p>\n<p>以下是基于ubuntu的。</p>\n<h2 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h2><p>域名管理系统DNS(Domain Name System)，是通过域名来解析到IP的一种网络服务，自建DNS服务器，可以在内网中，自己设定特定的域名解析，达到内网机器可以无需配置host，达到访问内网服务的作用。</p>\n<h3 id=\"DNS_u8BB0_u5F55_28_u5907_u5FD8_29_uFF1A\"><a href=\"#DNS_u8BB0_u5F55_28_u5907_u5FD8_29_uFF1A\" class=\"headerlink\" title=\"DNS记录(备忘)：\"></a>DNS记录(备忘)：</h3><ul>\n<li>A记录：        主机名或者域名 –&gt; 相应的IP地址；</li>\n<li>NS记录：        记录域名有哪些DNS服务器来解析；</li>\n<li>CNAME记录：    将域名的解析转到另外一个域名上去；</li>\n<li>MX记录：        一个网络里面的电子邮件服务引导到特定服务器；</li>\n<li>TXT记录：        提供了域名的文本信息；</li>\n</ul>\n<h2 id=\"Bind9\"><a href=\"#Bind9\" class=\"headerlink\" title=\"Bind9\"></a>Bind9</h2><p>bind(berkeley Internet Name Daemon)<br>建立DNS服务器，在ubuntu下只需要安装bind9就可以了。<br>    <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install bind9</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"u670D_u52A1_u5668\"><a href=\"#u670D_u52A1_u5668\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><p>bind9可以配置多种DNS服务器:</p>\n<ol>\n<li>缓冲服务器，用于缓存DNS服务，减少带宽使用；</li>\n<li>主服务器，用于记录DNS服务信息；</li>\n<li>从服务器，完整的备份主服务器的内容；</li>\n<li>混合服务器，多种服务器合并的累心；</li>\n<li>私用的主从服务器；</li>\n</ol>\n<h3 id=\"u4E3B_u8981_u914D_u7F6E\"><a href=\"#u4E3B_u8981_u914D_u7F6E\" class=\"headerlink\" title=\"主要配置\"></a>主要配置</h3><pre><code>cd /etc/bind/\n</code></pre><p>可以看出在目录下面有多个name.conf*的文件，为配置文件；db.*的文件为DNS记录文件；*.keys文件是Bind在交互过程中用于检验的秘钥。    </p>\n<h4 id=\"name-conf-options\"><a href=\"#name-conf-options\" class=\"headerlink\" title=\"name.conf.options\"></a>name.conf.options</h4><ul>\n<li>forwarders: 选择现有的DNS提供商，以’;’分割，如果不写的话，这个地方会被默认为root名称服务器来解析，速度会特别慢；</li>\n<li>directory “filename”: 用于存放该区域数据的文件；</li>\n<li>forward first: 在尝试通过root服务器解析DNS请求先，对DNS请求进行转发(forward only 不进行转发)；</li>\n<li>listen-on port *port{ ip-address;}: 指定监听哪一些网络接口(默认是127.0.0.1或者localhost)或者哪一个端口(默认是53)来监听客户端的查询；</li>\n<li>listen-on-v6 *port{any;}: 指定Bind通过哪一个多端口去监听IPv6的客户端请求，any只可以被none代替；</li>\n<li>query-source[-v6] address <em> port </em>: 服务器在查询解析的域名的时候，是有可能查询不到的而向其他服务器查询，因此，query-source可以设定这类查询采用什么样的地址和端口。这里的port只用于UDP的请求，TCP请求会随机使用一个大于1024的端口；</li>\n<li>allow_query {ip-address;}: 指定说哪一些IP的网络可以进行普通的查询；</li>\n<li>allow_transfer: 指定说哪一些IP的网络可以进行域的传输；</li>\n<li>statistics-interval: 生成统计信息；设置为0，则不生成；</li>\n<li>cleaning-interval: 缓存时间；</li>\n<li>interface-interval: 定期检测网络接口中存在的接口，设置为0，则不扫描；</li>\n<li>notify no: 在区域数据改动或者重启服务时，是否通知其他服务器；</li>\n<li>dump-file “filename”: 执行rndc dumpdb时，存放的路径；</li>\n</ul>\n<h4 id=\"name-conf_logging\"><a href=\"#name-conf_logging\" class=\"headerlink\" title=\"name.conf logging\"></a>name.conf logging</h4><pre><code> logging {\n       [ channel channel_name {\n         ( file path_name\n         [ versions ( number | unlimited ) ]\n         [ size size_spec ]\n         [ syslog (syslog_facility） | stderr | null)];\n         [ severity (critical | error | warning | notice | info | debug [ level ] | dynamic ); ]\n         [ print-category yes | no; ]\n         [ print-severity yes | no; ]\n         [ print-time yes | no; ]\n       }; ]\n       [ category category_name {\n         channel_name ; [ channel_name ; ... ]\n       }; ]\n       ...\n};\n</code></pre><ul>\n<li>file: 日志文件的路径；</li>\n<li>versions, size: 用于控制日志文件的版本；<ol>\n<li>如果size设置，versions没有设置，则写满日志文件之后，就会停止写入；</li>\n<li>如果size，versions设置，则写满日志文件之后，会更新日志文件版本，继续写入；</li>\n<li>如果size没设置，versions设置了，将会在Bind重启的时候再更新日志文件的版本；</li>\n</ol>\n</li>\n<li>syslog, stderr, null: 三个参数填写出其中的一个，syslog会将输出的信息输出到系统日志中，详细的配置可以看下syslog，stderr将通道的输出信息重定向到标准错误流中，null则是忽略信息；</li>\n<li>category: 这一部分的信息其实是将特定的输出内容写入指定的通道之中；具体有哪些种类的输出内容可以看下官方的介绍，种类太多也就不想列了。</li>\n</ul>\n<h4 id=\"name-conf_zone\"><a href=\"#name-conf_zone\" class=\"headerlink\" title=\"name.conf zone\"></a>name.conf zone</h4><p>在配置文件中，有name.conf.defaul-zones文件，已经默认的添加了部分DNS记录，而自建dns服务器，达到内网解析的关键，也就是配置这部分的文件。  </p>\n<p>zone的配置模板目下所示：</p>\n<pre><code>zone “catchenii.com” in {\n    type master;\n    file &quot;/etc/bind/db.catchenii.com&quot;\n}\n</code></pre><ul>\n<li>type: 指DNS服务器的类型，分别为master(主服务器)，slave(从服务器)，hint(区域服务器)；</li>\n<li>file: 区域数据文件；</li>\n<li>master{server-ip-address}: 从服务器配置指定从哪个服务器中获取区域数据文件；</li>\n<li>allow-update{!*;}: 是否允许外部创建DNS数据文件，默认是禁止的。(这一项就决定着有可能可以动态更新内网的DNS信息)  </li>\n</ul>\n<p>而对应的<strong>/etc/bind/db.catchenii.com</strong>区域数据文件则如图所示：<br><img src=\"http://7xnn4y.com1.z0.glb.clouddn.com/2.png\" alt=\"db.catchenii.com\"><br>区域文件有两种，一种是IP-&gt;域名，另外一种是域名-&gt;IP,上图当然是域名到IP得数据文件，两份记录的格式也是基本一致：</p>\n<pre><code>&apos;.&apos;在区域文件中是由重要的含义的，如果域名没有在末尾加入&apos;.&apos;，则会追加域名在后面，完整的域名必须在末尾加&apos;.&apos;。\n</code></pre><ul>\n<li>$TTL: 默认的存活时间；</li>\n<li>SOA: Start Of Authority 控制记录开始的位置。IN SOA后面是作为该区域的主服务器的名称。</li>\n<li>Serial: 每修改一次文件，数字都会添加，用于告诉从服务器改变的通知；</li>\n<li>Refresh: 下级服务器来校验serial number的时间间隔；</li>\n<li>Retry: 下级服务器连接主服务器时出现错误的重试时间间隔；</li>\n<li>Expire: 下级服务器无法联系主服务器时，缓存的超时时间；</li>\n<li>Negative Cache TTL: 解析失败的记录的缓存时间；  </li>\n</ul>\n<p>接下来的数据为DNS的解析记录啦！</p>\n<h3 id=\"u7ED3_u679C\"><a href=\"#u7ED3_u679C\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>修改好文件之后，可以重启下服务：</p>\n<pre><code>sudo /etc/init.d/bind9 restart\n</code></pre><p>效果如图所示：<br><img src=\"http://7xnn4y.com1.z0.glb.clouddn.com/3.png\" alt=\"结果图\"></p>\n<p>嘻嘻。</p>\n<h2 id=\"u5907_u8BB0_uFF1A\"><a href=\"#u5907_u8BB0_uFF1A\" class=\"headerlink\" title=\"备记：\"></a>备记：</h2><p>各类DNS服务器的<a href=\"https://en.wikipedia.org/wiki/Comparison_of_DNS_server_software\" target=\"_blank\" rel=\"external\">比较</a>!</p>\n"}