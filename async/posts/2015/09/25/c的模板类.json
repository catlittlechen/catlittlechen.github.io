{"tags":[{"name":"c++","permalink":"https://catlittlechen.com/tags/c/","url":"/async/tags/c++.json","count":1},{"name":"踩坑日记","permalink":"https://catlittlechen.com/tags/踩坑日记/","url":"/async/tags/踩坑日记.json","count":11}],"categories":[{"name":"c++","permalink":"https://catlittlechen.com/categories/c/","url":"/async/categories/c++.json","count":1}],"url":"/async/posts/2015/09/25/c的模板类.json","date":1443138997000,"path":{"year":2015,"month":9,"day":25,"name":"c的模板类"},"title":"c++的模板类","permalink":"https://catlittlechen.com/2015/09/25/c的模板类/","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>昨天帮一个同学debug一个问题，想想也是醉了，太久没写C++，报错信息都看着陌生，还好有万能的<a href=\"https://www.google.com.hk/\" target=\"_blank\" rel=\"noopener\">Google</a>，让我从<a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>中找到了答案。</p>\n<h2 id=\"开始讲故事\"><a href=\"#开始讲故事\" class=\"headerlink\" title=\"开始讲故事\"></a>开始讲故事</h2><p>C++标准库的书中，曾经说过这么一句话</p>\n<pre><code>唯一一种方便的使用模板类的方法是用内联函数的方式在头文件中一次性实现。\n</code></pre><h3 id=\"为什么呢？\"><a href=\"#为什么呢？\" class=\"headerlink\" title=\"为什么呢？\"></a>为什么呢？</h3><p>对于一个模板类，编译器在实例化的时候，通过模板类的参数，会创建一个新的类，举个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">     T bar;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(T param)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// somewhere in a .cpp</span></span><br><span class=\"line\">Foo&lt;<span class=\"keyword\">int</span>&gt; f; </span><br></pre></td></tr></table></figure>\n<p>当编译器读到下面这一行的时候，就会创建一个新的类，我们可以把它叫做FooInt，这个类的实现等价于下面这种模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FooInt</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> bar;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(<span class=\"keyword\">int</span> param)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，编译器开始需要去实现里面类的方法，自然是通过模板的参数来实现它们。如果这些实现不在头文件里面，编译器就无法获取到这些模板，自然就无法实现模板类的方法了。</p>\n<hr>\n<h3 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h3><p>当然，将函数的声明和实现放在多个文件中，有时候是非常有必要的，简洁，条理，或者强迫症。。。<br>一种简单的解决方案是在头文件中声明类的方法之后，把类的实现写在文件B中，然后再头文件中include文件B，如下所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在Foo.h中声明；</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(T param)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//include 实现的文件；</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Foo.tpp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在Foo.tpp中实现函数；</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Foo&lt;T&gt;::doSomething(T param)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   \t<span class=\"comment\">//implementation</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>哈哈，这是一种十分取巧的方法，不过也达到了目的，而且效果拔群。<br>还有一种方法，感觉上就不是很推荐了，但是更加正常一些。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Foo.h</span></span><br><span class=\"line\"><span class=\"comment\">// no implementation</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span> &#123;</span> ... &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Foo.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// implementation of Foo's methods</span></span><br><span class=\"line\"><span class=\"comment\">// explicit instantiations</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>&lt;int&gt;;</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>&lt;float&gt;;</span></span><br></pre></td></tr></table></figure>\n<p>这种方法就是在cpp文件中，实现的模板类的函数之后，在文件中同时将你想要使用的模板参数，明确的实例化出来。  </p>\n<p>本人还是比较喜欢第一种，毕竟  </p>\n<pre><code>1.我不喜欢一个模板类实现在一个文件里，过长的文件真得太受不了了。\n2.第二种方法也就必须把所有的模板类函数实现在一个文件里！\n</code></pre><p>博文翻译于<a href=\"http://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>.</p>\n<h4 id=\"TODO：\"><a href=\"#TODO：\" class=\"headerlink\" title=\"TODO：\"></a>TODO：</h4><p>可以看下答主推荐的<a href=\"https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n"}