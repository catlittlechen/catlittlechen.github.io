{"tags":[{"name":"踩坑日记","permalink":"http://catlittlechen.com/tags/踩坑日记/","url":"/async/tags/踩坑日记.json","count":11},{"name":"翻译","permalink":"http://catlittlechen.com/tags/翻译/","url":"/async/tags/翻译.json","count":1},{"name":"solr","permalink":"http://catlittlechen.com/tags/solr/","url":"/async/tags/solr.json","count":1}],"categories":[{"name":"学习","permalink":"http://catlittlechen.com/categories/学习/","url":"/async/categories/学习.json","count":8}],"url":"/async/posts/2015/09/23/译-solr-boolean-operators.json","date":1443014698000,"path":{"year":2015,"month":9,"day":23,"name":"译-solr-boolean-operators"},"title":"[译]solr boolean operators","permalink":"http://catlittlechen.com/2015/09/23/译-solr-boolean-operators/","content":"<h2 id=\"踩坑感言：\"><a href=\"#踩坑感言：\" class=\"headerlink\" title=\"踩坑感言：\"></a>踩坑感言：</h2><p>这个故事告诉我，<strong>做事情不要想当然</strong>，你觉得的事情，一定不是对的。</p>\n<hr>\n<h2 id=\"译文原文：\"><a href=\"#译文原文：\" class=\"headerlink\" title=\"译文原文：\"></a>译文原文：</h2><p>来自于<a href=\"http://robotlibrarian.billdueber.com/2011/12/solr-and-boolean-operators/\" target=\"_blank\" rel=\"noopener\">Bill Dueber</a>.</p>\n<hr>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>在Solr中一定要用括号去管理优先级！！！</p>\n<hr>\n<h6 id=\"搞起搞起！\"><a href=\"#搞起搞起！\" class=\"headerlink\" title=\"搞起搞起！\"></a>搞起搞起！</h6><p>用过Solr的同学知道一下查询，Solr是怎么做的么？</p>\n<pre><code>a OR b AND C\n</code></pre><p>我可以给你三种选择，但是前两种肯定是错误的，而且你也不会想到第三种，因此还是不要花费太多的时间去想吧。</p>\n<h3 id=\"boolean运算符的优先级\"><a href=\"#boolean运算符的优先级\" class=\"headerlink\" title=\"boolean运算符的优先级\"></a>boolean运算符的优先级</h3><p>如果你曾经知道过boolean运算相关的知识，你坑定为知道一个严格意义上的顺序，那就是NOT&gt;AND&gt;OR，因此，可能就会使下面一种执行顺序：</p>\n<pre><code>a OR (b AND c)\n</code></pre><p>这是猜想答案的一种，但是Solr不是这么做的。</p>\n<h3 id=\"从左到右？\"><a href=\"#从左到右？\" class=\"headerlink\" title=\"从左到右？\"></a>从左到右？</h3><p>部分本地的学生，或者说也有至少一门编程语言，用的是简单的从左到右的执行方法，因此，就会有如下的一种执行顺序：</p>\n<pre><code>（a OR b) AND c\n</code></pre><p>不幸的是，这个还是错的。</p>\n<h3 id=\"那么还有什么答案呢？\"><a href=\"#那么还有什么答案呢？\" class=\"headerlink\" title=\"那么还有什么答案呢？\"></a>那么还有什么答案呢？</h3><p>正确的执行顺序可以用如下的代码来表示，待会再通过lucene的查询分析来解释下：</p>\n<pre><code>（b AND c）\n</code></pre><p>在这里，第一个判断被抛弃了！也就是说，第一个判断其实是可有可无的！</p>\n<h3 id=\"你还会让你的使用者将AND-OR-NOT放在他们的查询里么？\"><a href=\"#你还会让你的使用者将AND-OR-NOT放在他们的查询里么？\" class=\"headerlink\" title=\"你还会让你的使用者将AND/OR/NOT放在他们的查询里么？\"></a>你还会让你的使用者将AND/OR/NOT放在他们的查询里么？</h3><p>但愿他们并不知道什么是boolean运算；如果他们知道，但愿他们会使用括号，或者你可以帮他们判断出来，不然，他们将会死得很惨。。。。</p>\n<h3 id=\"更多的测试\"><a href=\"#更多的测试\" class=\"headerlink\" title=\"更多的测试\"></a>更多的测试</h3><p>我在Solr(3.5)的里面测试下所有可以的情况（用的是curly，larry，moe和shemp的排序）总共有15种情况。</p>\n<p>我写了个脚本来跑这些情况，分别在lucene和edismax下，看看可以得到什么样的结果。所有的测试中，lucene的默认运算符是AND，edismax的mm参数设置为100%</p>\n<pre><code>Lucene                    EDismax\n</code></pre><hr>\n<ol>\n<li>curly AND larry</li>\n</ol>\n<pre><code>curly larry               curly larry\ncurly larry moe           curly larry moe\ncurly larry shemp         curly larry shemp\ncurly larry moe shemp     curly larry moe shemp\n</code></pre><ol>\n<li>curly AND larry OR moe</li>\n</ol>\n<pre><code>curly                     curly larry\ncurly larry               curly larry moe\ncurly moe                 curly larry shemp\ncurly shemp               curly larry moe shemp\ncurly larry moe\ncurly larry shemp\ncurly moe shemp\ncurly larry moe shemp\n</code></pre><ol>\n<li>curly OR larry AND moe</li>\n</ol>\n<pre><code>larry moe                 larry moe\ncurly larry moe           curly larry moe\nlarry moe shemp           larry moe shemp\ncurly larry moe shemp     curly larry moe shemp\n</code></pre><ol>\n<li>curly AND larry OR moe AND shemp</li>\n</ol>\n<pre><code>curly moe shemp           curly larry moe shemp\ncurly larry moe shemp\n</code></pre><ol>\n<li>moe AND shemp OR curly AND larry</li>\n</ol>\n<pre><code>curly larry moe           curly larry moe shemp\ncurly larry moe shemp\n</code></pre><p>查询1的答案是在预想中的。查询2的答案中，明显的就发现在lucene查询器下只有有’curly’就可以了，而在edismax下就需要’curly AND larry’（查询3一样的是变成了’larry AND moe’）。查询4和查询5也是同样的道理。当然，你可以看下debug查询输出，来知道她们是什么样的运行结果，但是没有告诉我为什么。</p>\n<h3 id=\"启示\"><a href=\"#启示\" class=\"headerlink\" title=\"启示\"></a>启示</h3><p>好消息就是，不论是lucene还是edismax，在用括号的时候，她们的答案都是显而易见的。<br>在lucene-167cene的缺陷管理中也确实提到了这个问题(<a href=\"https://issues.apache.org/jira/browse/LUCENE-167\" target=\"_blank\" rel=\"noopener\">Lucene-167</a>,<a href=\"https://issues.apache.org/jira/browse/LUCENE-1823\" target=\"_blank\" rel=\"noopener\">lucene-1823</a>)，而在<a href=\"http://www.mail-archive.com/java-user@lucene.apache.org/msg00008.html\" target=\"_blank\" rel=\"noopener\">2005 mailling list thread</a>中也指出也这种现象，但是它还是仍旧存在。</p>\n<p>~~~</p>\n<p>还是老老实实的用上括号吧，以免再入坑！</p>\n"}