<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CatChen]]></title>
  <subtitle><![CDATA[我的王国，我一定会让你永垂不朽的]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://catlittlechen.com/"/>
  <updated>2017-11-20T15:38:14.000Z</updated>
  <id>http://catlittlechen.com/</id>
  
  <author>
    <name><![CDATA[Chan Cat]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[kafka]]></title>
    <link href="http://catlittlechen.com/2017/10/10/kafka/"/>
    <id>http://catlittlechen.com/2017/10/10/kafka/</id>
    <published>2017-10-10T14:54:53.000Z</published>
    <updated>2017-11-20T15:38:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>一大利器，以零拷贝，文件append之类好玩的优点，而被选择为了很多公司的数据总线，配置什么的就不多说了，Google等搜索引擎可以找到很多文章来介绍，那我就介绍下，我遇到的问题吧。</p>
<h2 id="formatVersion"><a href="#formatVersion" class="headerlink" title="formatVersion"></a>formatVersion</h2><p>  kafka好不容易到达1.0版本，而0.8版本到现在，message的format有了3个版本，其中v1，v2的差距不大，但是v3的版本为了batch而生，因而版本差异比较大。<br>  但是落地到文件的版本，是由kafka启动的配置文件中配置的。kafka为了兼容各个版本，在通讯协议中支持message版本之间的转化。但是这个转化势必在server端执行，会浪费不必要的CPU，因为，在使用kafka的过程中，最好是根据业务需要，统一server与client的messageFormatVersion。</p>
<h2 id="jmxtrans"><a href="#jmxtrans" class="headerlink" title="jmxtrans"></a>jmxtrans</h2><p>  kafka原生会暴露一个java系的监控接口，在kafka-server-start.sh中，可以看到JMX_PORT相关的配置。而jmxtrans是一个服务，可以将kafka—jmx中暴露出来的数据，整理写入ganglia中。配置可以看它的<a href="https://github.com/jmxtrans/jmxtrans" target="_blank" rel="external">github</a>，kafka的监控项可以看<a href="http://kafka.apache.org/documentation/#configuration" target="_blank" rel="external">官网</a></p>
<h2 id="kafka-manager"><a href="#kafka-manager" class="headerlink" title="kafka-manager"></a>kafka-manager</h2><p>  好吧，业务的同学都是喜欢有个页面的监控，所以嘛，找个yahoo的这个<a href="https://github.com/yahoo/kafka-manager" target="_blank" rel="external">监控</a>.配置简单，可以通过jmx的接口，查找到类似于consumerGroup的延迟，数据传输的监控，并且可以看到类似于out of Sync等。点到为止~</p>
<h2 id="replications"><a href="#replications" class="headerlink" title="replications"></a>replications</h2><p>  一个好的作品都是留给了使用者很多配置，很多很多配置。因此，kafka留了这个replication特性。如果你只关注性能，那么replication=1，每一个partition只有一份，这个在写入的时候，性能最佳，坏处就是单一个kafka实例失败的时候，这个partition就失败了。但是，一旦设置了replication&gt;1，那么kafka实例失败后，这个实例的partition只是outOfSync，重启等操作后，可以恢复。整个集群的partition还是可用的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>一大利器，以零拷贝，文件append之类好玩的优点，而被选择为了很多公司的数据总线，配置什么的就不多说了，Googl]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="kafka" scheme="http://catlittlechen.com/tags/kafka/"/>
    
      <category term="kafka" scheme="http://catlittlechen.com/categories/kafka/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[whoiam]]></title>
    <link href="http://catlittlechen.com/2017/09/24/whoiam/"/>
    <id>http://catlittlechen.com/2017/09/24/whoiam/</id>
    <published>2017-09-23T16:18:44.000Z</published>
    <updated>2017-09-23T17:33:47.000Z</updated>
    <content type="html"><![CDATA[<p>你离开的第一周，生活继续。</p>
<p>我在手机的备忘录里面，记录了我自问的所有问题。只是我找不到答案。</p>
<p>最近发生了很多事情，我该记一记。</p>
<ol>
<li>这周刚好飞哥他们参加各种校招笔试面试，所以下班后也帮他们做做笔试，讲解各种遇到的知识点。但是只是他们临时抱佛脚而已，被问多了，自然露马脚。总觉得这么做不对，但是我也只能帮一些了。之前明明很多次提醒他们该做什么，似乎也没什么用。这是个人性格问题吧。毕竟肯好好看书的人，实在不多了。</li>
<li>我发现，身边好多擦边球的赚钱玩法，发现聚会的时候，都开始聊起这样子的话题。可我还是不喜欢，甚至难受。我在我可预见的未来里面，虽然看到了悲观的可能性，但是走一步看一步吧。我总觉得毕业了两年，还像一个学生。也许这也挺好的。可以脚踏实地，仰望星空的生活，是我这么多年，最大的欣慰了吧。我只是不想，活成我讨厌的那种人。</li>
<li>我在国内的那段时间内，我在想，我和叶同学，黄同学之间的区别。技术在我看来，是一种知识，需要不断尝试掌握的。他们身上，我和我很像的求知欲。但是黄同学毕竟是管理层，所以也在乎KPI，但是他的能力不容置疑。叶同学，人很nick，足够的亲和度，可以融洽整个团队。写了这个多，感觉我缺少的是决断的能力。干了这么多年，惭愧了。破而不立，是目前一个瓶颈，我知道什么场景适用什么技术架构，但是需要新的场景，我可以很快地否定不好的方案。但是自己却没办法提出更好的，甚至于完美的方案。</li>
<li>时间到底怎么了。公司一直在成长，也许大家习惯了围绕着业务开展，工作时间被迫碎片化。以为做了很多东西，实际上并没有做出什么成就。</li>
<li>回头看了上面写的东西，有点想删除的冲动。今天公司举办运动会，一开始我是拒绝的。实际上我差点拒绝了。虽然最后还是去了，还参加了拔河比赛。亚军也挺不错的啦。fate/zero里面征服者大帝曾经说过，一个人的不该为了别人的梦想而努力，而应该寻找这一群有相同梦想的人，然后去完成这个梦想。这是很多人渴望有团队活动的原因。</li>
<li>困了，睡觉吧~</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>你离开的第一周，生活继续。</p>
<p>我在手机的备忘录里面，记录了我自问的所有问题。只是我找不到答案。</p>
<p>最近发生了很多事情，我该记一记。</p>
<ol>
<li>这周刚好飞哥他们参加各种校招笔试面试，所以下班后也帮他们做做笔试，讲解各种遇到的知识点。但是]]>
    </summary>
    
      <category term="生活" scheme="http://catlittlechen.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="转折" scheme="http://catlittlechen.com/tags/%E8%BD%AC%E6%8A%98/"/>
    
      <category term="活着" scheme="http://catlittlechen.com/categories/%E6%B4%BB%E7%9D%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[oneproxy]]></title>
    <link href="http://catlittlechen.com/2017/09/21/oneproxy/"/>
    <id>http://catlittlechen.com/2017/09/21/oneproxy/</id>
    <published>2017-09-21T00:49:25.000Z</published>
    <updated>2017-09-26T13:57:21.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间调研了一下oneproxy，google收录的资料比较少，基本都是看得官方的博客文章．<br><a href="http://www.onexsoft.com" target="_blank" rel="external">oneproxy</a>，出生于阿里系的人员之手，主要的目的是为了解决数据库变迁所带来的问题．</p>
<h2 id="u7279_u70B9"><a href="#u7279_u70B9" class="headerlink" title="特点"></a>特点</h2><p>负载均衡 + 分库分表 + 大数据 + SQL监控 + 安全审计</p>
<p>说说我想了解的几个方面吧～</p>
<h2 id="SQL_u76D1_u63A7"><a href="#SQL_u76D1_u63A7" class="headerlink" title="SQL监控"></a>SQL监控</h2><p>在解决安全方面，oneproxy有几个层次验证拦截．<br>  1．网络隔离，oneproxy可以限制其他机器对端口的访问</p>
<ol>
<li>登录验证，就是数据库用户密码验证</li>
<li>访问限制，就是MySQL等常见的权限验证</li>
<li>应用验证，类似于Google的动态口令，发送一个特殊的SQL语句来对数据库的访问进行解锁</li>
<li>SQL白名单，需要搜集目前可以执行的SQL模板形成白名单，可以有效的防止SQL注入．<br>除此之外，还有基于客户端IP地址的流量控制，而且还有很多监控相关的数据可以查看，具体就不罗列了．</li>
</ol>
<h2 id="u8D1F_u8F7D_u5747_u8861"><a href="#u8D1F_u8F7D_u5747_u8861" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>由于oneproxy实际上是一个代理，所以实际上，后端到底是访问哪个数据库，对于用户本身是未知的．<br>如同haproxy或者codis这一类应用一样，它可以减少实际数据库的链接数，减少tcp链接频繁创建．<br>所以，oneproxy不能用<code>use</code>,存储过程，<code>prepare</code>这一类的操作．<br>更大的好处是，多实例数据库可以防止单点故障．</p>
<p>我看oneproxy有相关的配置，可以让它优先去访问master还是slave数据库，但是这个操作是oneproxy实例级别的，大部分业务场景都是读写分离，但是对于部分实时性要求比较高的场景，读写都会在主数据库完成，即使是开了SemiSync也是不够的，是否可以做到指定呢？还是说，这时候实际上，开发不应该基于MySQL等来完成实时的一致性校验．<br>目前的策略是 read_slave, read_balance, big_slave, big_balance．完整的介绍<a href="http://www.onexsoft.com/zh/oneproxy-read-traffic-scaleout.html" target="_blank" rel="external">传送门</a></p>
<h2 id="u5206_u5E93_u5206_u8868"><a href="#u5206_u5E93_u5206_u8868" class="headerlink" title="分库分表"></a>分库分表</h2><p>这是很多proxy都需要支持的一个特性，mysql实际上也是支持单实例的分区的，不过这对SQL解析和merge数据方存在一定的挑战．这个特性的基础上，大表可以根据需要分散到各个不同的数据库实例之中，对查询的性能瓶颈有很大的突破．不过存在的问题，比如分布式事务的支持，我看oneproxy还是没有解决的，毕竟老大难．<br>这里有个很不错的功能，是在分库分表的情况下，可以生成对应的主键．<a href="http://www.onexsoft.com/zh/oneproxy-sharding-key-sequence.html" target="_blank" rel="external">创送们</a> 从前自己实现的分表里面，主键是通过redis来维护的自增值．用oneproxy的话，就方便多了～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间调研了一下oneproxy，google收录的资料比较少，基本都是看得官方的博客文章．<br><a href="http://www.onexsoft.com" target="_blank" rel="external">oneproxy</a>，出生于阿里系的人]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="oneproxy" scheme="http://catlittlechen.com/tags/oneproxy/"/>
    
      <category term="学习" scheme="http://catlittlechen.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[naxsi]]></title>
    <link href="http://catlittlechen.com/2017/09/16/naxsi/"/>
    <id>http://catlittlechen.com/2017/09/16/naxsi/</id>
    <published>2017-09-16T12:58:16.000Z</published>
    <updated>2017-09-26T13:56:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Naxsi"><a href="#Naxsi" class="headerlink" title="Naxsi"></a><a href="https://github.com/nbs-system/naxsi" target="_blank" rel="external">Naxsi</a></h2><p>github上，NAXSI自我介绍是Nginx Anti XSS &amp; SQL Injection。顾名思义，他是nginx一个用来防止XSS和SQL注入的Nginx插件。</p>
<p>原来就是将请求的各个参数，通过Naxsi预先设置的规则判断，通过得分，来决定是否拦截。</p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>安装很简单，ubuntu上面只需要<code>apt-get nginx-naxsi</code>就可以啦~其他系统则可以选择官方介绍的，将Naxsi编译进nginx中，wiki上注明需要优先编译Naxsi。</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol>
<li>在http{}层，加入<code>include naxsi_core.rules</code>。naxsi_core.rules是naxsi自带的核心规则。可以防止一般的SQL注入和XSS。</li>
<li>在server{}层，可以动态的设定一些参数。具体见<a href="https://github.com/nbs-system/naxsi/wiki/runtime-modifiers" target="_blank" rel="external">传送门</a>。</li>
<li>在location{}层，可以设置naxsi的开关(是否执行，学习模式[–&gt;观察者模式])，白名单，拦截规则，还有拦截后的重定向。依旧是一个[传送门] (<a href="https://github.com/nbs-system/naxsi/wiki/naxsi-setup)。" target="_blank" rel="external">https://github.com/nbs-system/naxsi/wiki/naxsi-setup)。</a></li>
</ol>
<h3 id="u5177_u4F53_u7EC6_u8282"><a href="#u5177_u4F53_u7EC6_u8282" class="headerlink" title="具体细节"></a>具体细节</h3><p>LearningMode是学习模式，开启后，naxsi会在errorLog中打出拦截的请求和拦截的原因，但是并不会真正的拦截请求。因此，使用者可以通过errLog分析得到目前的拦截规则是否适用于服务。</p>
<p>errLog大概长得像这样子</p>
<pre><code>2017/09/15 06:12:33 [error] 18321#0: *291887486 NAXSI_FMT: ip=172.16.1.1&amp;server=a.b.com&amp;uri=/hello&amp;learning=1&amp;vers=0.55.3&amp;total_processed=10086&amp;total_blocked=404&amp;block=1&amp;cscore0=$SQL&amp;score0=8&amp;zone0=ARGS&amp;id0=1000&amp;var_name0=s&amp;zone1=ARGS&amp;id1=1009&amp;var_name1=s, client: 172.16.1.1, server: a.b.com, request: &quot;GET /hello?s=***** HTTP/1.1&quot;, host: &quot;a.b.com&quot;
</code></pre><p>Naxsi认为，请求参数里面s中，有可能存在SQL注入(csore0=$SQL)，并且告诉我们，参与判定的规则是1000(id0=1000)，有问题的参数是s(var_name0=s)，当然出问题的不仅仅是一处时，他将会以平铺的模式，继续追加结果，如上所示。</p>
<p>如果我们认为，这个参数是不存在问题的，可以自己加入白名单。<br>比如如果我们想要将s这个参数排除在检测之外，则可以加入如下规则：</p>
<pre><code>BasicRule wl:0 &quot;mz:$ARGS_VAR:s|$URL:/hello&quot;;
</code></pre><h2 id="Nxapi"><a href="#Nxapi" class="headerlink" title="Nxapi"></a>Nxapi</h2><p>对于大型网站而言，一旦开启了Naxsi，产生的errLog将会极其庞大。Naxsi提供一个方案，来做事件分析，生成相应的白名单。这就是<a href="https://github.com/nbs-system/naxsi/tree/master/nxapi" target="_blank" rel="external">nxapi</a>啦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Naxsi"><a href="#Naxsi" class="headerlink" title="Naxsi"></a><a href="https://github.com/nbs-system/naxsi" target="_blank" rel="exte]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="naxsi" scheme="http://catlittlechen.com/tags/naxsi/"/>
    
      <category term="学习" scheme="http://catlittlechen.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[踩坑日记之Upstart]]></title>
    <link href="http://catlittlechen.com/2017/08/11/upstart/"/>
    <id>http://catlittlechen.com/2017/08/11/upstart/</id>
    <published>2017-08-11T15:03:55.000Z</published>
    <updated>2017-09-26T13:57:36.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Upstart_u7684Expect"><a href="#Upstart_u7684Expect" class="headerlink" title="Upstart的Expect"></a>Upstart的Expect</h4><p>用upstart来管理系统的服务，很常见。但是也有需要注意的地方。比如，配置文件里面的expect。</p>
<p>Expect有两种，”expect fork”表示进程只会fork一次，”expect daemonize”表示进程会fork两次，将自己变成后台进程。</p>
<p>然而，错误的配置文件会让upstart启动某个进程之后，却无法跟踪管理这个进程的PID。结果Upstart会进入奇妙的状态。</p>
<p>没办法，虽然本应该是它的PID，还没找到就不见了~因此，它十分怀念，念念不忘这个PID，以至于再也无法控制这个程序~无法启动，停止，重启这个进程。</p>
<h3 id="u600E_u4E48_u529E_uFF1F"><a href="#u600E_u4E48_u529E_uFF1F" class="headerlink" title="怎么办？"></a>怎么办？</h3><p>方法其实很简单，如果我们可以启动一个服务，它的PID是Upstart所需要的PID，然后让Upstart跟踪到，然后kill掉这个PID的进程，那么Upstart的行为才可以变为正常。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>有一个ruby的<a href="https://raw.githubusercontent.com/ion1/workaround-upstart-snafu/master/workaround-upstart-snafu" target="_blank" rel="external">代码</a>，可以参考下。亲测可用~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Upstart_u7684Expect"><a href="#Upstart_u7684Expect" class="headerlink" title="Upstart的Expect"></a>Upstart的Expect</h4><p>用upstart来管理系]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="upstart" scheme="http://catlittlechen.com/tags/upstart/"/>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[踩坑日记之nginx-limit-req]]></title>
    <link href="http://catlittlechen.com/2017/08/10/nginx/"/>
    <id>http://catlittlechen.com/2017/08/10/nginx/</id>
    <published>2017-08-10T15:47:11.000Z</published>
    <updated>2017-09-26T13:56:59.000Z</updated>
    <content type="html"><![CDATA[<p>一般我们都认为nginx -t可以测试出配置文件是否配置正确。<br>其实不然~</p>
<h4 id="limit_req_zone"><a href="#limit_req_zone" class="headerlink" title="limit_req_zone"></a><code>limit_req_zone</code></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">limit_req_zone  <span class="variable">$binary_remote_addr</span>  <span class="attribute">zone</span>=req_one:10m <span class="attribute">rate</span>=1r/s</div></pre></td></tr></table></figure>
<p>这是nginx配置速率限制的插件。具体可以自行查询相关资料。</p>
<h4 id="u5751"><a href="#u5751" class="headerlink" title="坑"></a>坑</h4><p>当时原本设置的限制条件为$uri，测试的过程中，发现实际上$request_uri才是符合要求的限制条件，因而修改了配置，<code>nginx -t</code>测试顺利通过，<code>nginx -s reload</code>也没有任何报错。但是实际上，nginx worker并没有退出。</p>
<p>一开始还认为是worker承载的请求太多，以至于请求没能处理完毕，导师worker延迟退出。<br>直到多心去看了一眼日志，才发现，limit_req这个模块，在设置<code>limit_req_zone</code>的时候是无法修改限制条件的。</p>
<h4 id="u65B9_u6CD5"><a href="#u65B9_u6CD5" class="headerlink" title="方法"></a>方法</h4><p>只能够同时修改zone~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般我们都认为nginx -t可以测试出配置文件是否配置正确。<br>其实不然~</p>
<h4 id="limit_req_zone"><a href="#limit_req_zone" class="headerlink" title="limit_req_zone">]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="nginx" scheme="http://catlittlechen.com/tags/nginx/"/>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pyrobuf的改进]]></title>
    <link href="http://catlittlechen.com/2017/07/12/pyrobuf%E7%9A%84%E6%94%B9%E8%BF%9B/"/>
    <id>http://catlittlechen.com/2017/07/12/pyrobuf的改进/</id>
    <published>2017-07-12T02:42:18.000Z</published>
    <updated>2017-09-02T03:11:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u95EE_u9898_281_29_u2013_u5B57_u7B26_u4E32_u7F16_u7801"><a href="#u95EE_u9898_281_29_u2013_u5B57_u7B26_u4E32_u7F16_u7801" class="headerlink" title="问题(1)–字符串编码"></a>问题(1)–字符串编码</h3><p>protobuf的标准里面，所有的字符串都是标准的UTF-8模式。而python恰恰是一个经常性遇到字符串编码问题的语言。</p>
<p>但是pyrobuf里面，处理字符串的时候，当遇到字符串问题的时候，不会跑出错误，而会直接崩溃。</p>
<h3 id="u89E3_u51B3_281_29"><a href="#u89E3_u51B3_281_29" class="headerlink" title="解决(1)"></a>解决(1)</h3><p>源码的模板中，可以选择在字符串decode的判断中，加入try-except，pass掉错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">	self._ = unicode(memory[current_offset:current_offset + field_size], <span class="string">'utf-8'</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">	self._ = <span class="string">u''</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>当然，这种修改必须修改掉全部的decode判断。也有另外一种方式，就是简单地抛出错误。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cdef <span class="keyword">int</span> _protobuf_deserialize(self, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *memory, <span class="keyword">int</span> <span class="built_in">size</span>) except <span class="number">-1</span>:</div></pre></td></tr></table></figure>
<p>在cython中<code>except -1</code>,代表着会将抛出的错误转化为python里面的Exception，就可以被上层调用的代码捕捉，不至于直接退出程序。</p>
<h3 id="u95EE_u9898_282_29_u2013_u5B57_u6BB5_u7F3A_u5C11"><a href="#u95EE_u9898_282_29_u2013_u5B57_u6BB5_u7F3A_u5C11" class="headerlink" title="问题(2)–字段缺少"></a>问题(2)–字段缺少</h3><p>通过源码阅读，可以发现实际上如果protobuf里面的字段我并不需要，那么精简proto定义，可以减少解析的字段，因而优化解析的性能。然而，pyrobuf却判断了传入的data的长度，和解析过的长度，然后抛出了错误，</p>
<h3 id="u89E3_u51B3_282_29"><a href="#u89E3_u51B3_282_29" class="headerlink" title="解决(2)"></a>解决(2)</h3><p>因而，需要删除这部分判断。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> buf != <span class="keyword">length</span>:</div><div class="line">	raise DecodeError(<span class="string">"Truncated message: got %s expected %s"</span> % (buf, size))</div></pre></td></tr></table></figure></p>
<h2 id="u53E6_u8F9F_u6EAA_u8DEF"><a href="#u53E6_u8F9F_u6EAA_u8DEF" class="headerlink" title="另辟溪路"></a>另辟溪路</h2><p>google的protobuf库里面实际上已经有了protobufc，解析的效率实际上与pyrobuf差不多。如果单纯只是解析的话，可以直接使用google的原生库。当然，pyrobuf还提供了输出到json,dict的函数~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u95EE_u9898_281_29_u2013_u5B57_u7B26_u4E32_u7F16_u7801"><a href="#u95EE_u9898_281_29_u2013_u5B57_u7B26_u4E32_u7F16_u7801" class="hea]]>
    </summary>
    
      <category term="python" scheme="http://catlittlechen.com/tags/python/"/>
    
      <category term="pyrobuf" scheme="http://catlittlechen.com/tags/pyrobuf/"/>
    
      <category term="python" scheme="http://catlittlechen.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ganglia-buffer]]></title>
    <link href="http://catlittlechen.com/2017/07/10/ganglia-buffer/"/>
    <id>http://catlittlechen.com/2017/07/10/ganglia-buffer/</id>
    <published>2017-07-10T11:03:58.000Z</published>
    <updated>2017-09-26T13:58:30.000Z</updated>
    <content type="html"><![CDATA[<p>最近给服务器的redis-cluster加ganglia监控，但是配置加载之后，ganglia却失控了．面板上面ganglia部分数据无法显示．debug的时候，发现ganglia-monitor可以正常的收集数据，那么问题出在哪里呢？</p>
<h2 id="/etc/ganglia/gmond-conf"><a href="#/etc/ganglia/gmond-conf" class="headerlink" title="/etc/ganglia/gmond.conf"></a>/etc/ganglia/gmond.conf</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">udp_recv_channel &#123;</div><div class="line">   <span class="built_in"> port </span>= 8649</div><div class="line">    bind = ***.***.***.***</div><div class="line">    retry_bind = <span class="literal">true</span></div><div class="line">    # Size of the UDP buffer. <span class="keyword">If</span> you are handling lots of metrics you really # should bump it up <span class="keyword">to</span> e.g. 10MB <span class="keyword">or</span> even higher.</div><div class="line">    buffer = 10485760</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>gmond默认的配置文件里面并没有写上这行配置，所以很多人都会忽略掉．</p>
<h2 id="u7ED3_u679C"><a href="#u7ED3_u679C" class="headerlink" title="结果"></a>结果</h2><p>修改buffer大小就可以啦．</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>最近给服务器的redis-cluster加ganglia监控，但是配置加载之后，ganglia却失控了．面板上面ganglia部分数据无法显示．debug的时候，发现ganglia-monitor可以正常的收集数据，那么问题出在哪里呢？</p>
<h2 id="/etc/g]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="ganglia" scheme="http://catlittlechen.com/tags/ganglia/"/>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年不懂的spark(4)]]></title>
    <link href="http://catlittlechen.com/2017/07/01/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark-4/"/>
    <id>http://catlittlechen.com/2017/07/01/那些年不懂的spark-4/</id>
    <published>2017-07-01T03:19:20.000Z</published>
    <updated>2017-09-02T03:14:45.000Z</updated>
    <content type="html"><![CDATA[<h2 id="spark-files"><a href="#spark-files" class="headerlink" title="spark-files"></a>spark-files</h2><p>spark-default.xml<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spark<span class="selector-class">.files</span><span class="selector-class">.maxPartitionBytes</span> <span class="number">67108864</span></div><div class="line">spark<span class="selector-class">.sql</span><span class="selector-class">.files</span><span class="selector-class">.maxPartitionBytes</span> <span class="number">33554432</span></div></pre></td></tr></table></figure></p>
<p>spark在读取大文件的时候会自动的分区，这时候分区的标准就是上面这两个参数．<br>因此可以根据这两个参数调配任务的task，防止内存爆了．</p>
<h2 id="spark-dynamicAllocation"><a href="#spark-dynamicAllocation" class="headerlink" title="spark-dynamicAllocation"></a>spark-dynamicAllocation</h2><p>spark-default.xml<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spark<span class="selector-class">.dynamicAllocation</span><span class="selector-class">.enabled</span>  true</div><div class="line">spark<span class="selector-class">.dynamicAllocation</span><span class="selector-class">.executorIdleTimeout</span> <span class="number">10s</span></div></pre></td></tr></table></figure></p>
<p>dynamicAllocation 是spark自动调配executor的方式．可以尽可能的使用spark集群，<br>调节executorIdleTimeout，可以在任务使用完executor之后，尽快地释放executor，使得其它任务可以尽快的使用．</p>
<h2 id="u7ED3_u5C40"><a href="#u7ED3_u5C40" class="headerlink" title="结局"></a>结局</h2><p>未完待续</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>偶尔会遇到timeout的情况，这时候一般都是内存不足，一直不是很明白spark到底怎么使用内存的．也许不是java党的缘故，有点难以着手．有空再好好剖析．</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="spark-files"><a href="#spark-files" class="headerlink" title="spark-files"></a>spark-files</h2><p>spark-default.xml<br><figure class]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/tags/spark/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/categories/spark/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年不懂的spark(3)]]></title>
    <link href="http://catlittlechen.com/2017/06/03/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark-3/"/>
    <id>http://catlittlechen.com/2017/06/03/那些年不懂的spark-3/</id>
    <published>2017-06-03T04:13:45.000Z</published>
    <updated>2017-06-03T06:34:46.000Z</updated>
    <content type="html"><![CDATA[<p>aws的emr起来之后，默认的磁盘很小，所以长期跑任务的时候，经常会因为磁盘不够，导致节点失败。而且，这种情况下的emr，是不会自动修复的。</p>
<h2 id="spark-history"><a href="#spark-history" class="headerlink" title="spark-history"></a>spark-history</h2><p>spark-default.xml<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spark<span class="selector-class">.history</span><span class="selector-class">.fs</span><span class="selector-class">.cleaner</span><span class="selector-class">.enabled</span> true</div><div class="line">spark<span class="selector-class">.history</span><span class="selector-class">.fs</span><span class="selector-class">.cleaner</span><span class="selector-class">.interval</span> <span class="number">1</span>m</div><div class="line">spark<span class="selector-class">.history</span><span class="selector-class">.fs</span><span class="selector-class">.cleaner</span><span class="selector-class">.maxAge</span> <span class="number">1</span>h</div></pre></td></tr></table></figure></p>
<p>spark-history里面保存着spark的application的log，因此如果不需要的话，可以把清理的时间变短一下。</p>
<h2 id="spark-yarn"><a href="#spark-yarn" class="headerlink" title="spark-yarn"></a>spark-yarn</h2><p>yarn-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.localizer.cache.target-size-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>5120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.localizer.cache.cleanup.interval-ms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>spark执行任务的时候，会将自身需要的jar放到hadoop上，导致hadoop的磁盘会缓存下一堆的目录，也是可以定期清理的。</p>
<h2 id="u7ED3_u5C40"><a href="#u7ED3_u5C40" class="headerlink" title="结局"></a>结局</h2><p>未完待续</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>aws的emr起来之后，默认的磁盘很小，所以长期跑任务的时候，经常会因为磁盘不够，导致节点失败。而且，这种情况下的emr，是不会自动修复的。</p>
<h2 id="spark-history"><a href="#spark-history" class="headerl]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/tags/spark/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/categories/spark/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[touch]]></title>
    <link href="http://catlittlechen.com/2017/05/26/touch/"/>
    <id>http://catlittlechen.com/2017/05/26/touch/</id>
    <published>2017-05-26T07:26:01.000Z</published>
    <updated>2017-05-26T07:45:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Touch"><a href="#Touch" class="headerlink" title="Touch"></a>Touch</h3><p>touch这个命令,对于一个技术而言,应该是十分熟悉的.<br>像uwsgi这种就可以使用监听一个文件的方式来触发服务更新的部署方式,我们这时候就会用到<code>touch reload</code>的命令来完成.<br>更重要的是,我习惯性地打<code>ls -al</code>的命令来查看文件的最后修改时间,来查看是否有小朋友乱动了线上的文件.</p>
<p>直到有一天……..<br>有同事告诉我,touch有个神奇的功能.<br>于是乎,我<code>touch --help</code>下</p>
<pre><code>-a            只更改访问时间
-c, --no-create 不创建任何文件
-d, --date=字符串 使用指定字符串表示时间而非当前时间
-f          (忽略)
-h, --no-dereference      会影响符号链接本身，而非符号链接所指示的目的地
    (当系统支持更改符号链接的所有者时，此选项才有用)
-m            只更改修改时间
-r, --reference=FILE   use this file&apos;s times instead of current time
-t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of current time
--time=WORD        change the specified time:
    WORD is access, atime, or use: equivalent to -a
    WORD is modify or mtime: equivalent to -m
--help      显示此帮助信息并退出
--version     显示版本信息并退出
</code></pre><h3 id="u60CA_21"><a href="#u60CA_21" class="headerlink" title="惊!"></a>惊!</h3><p>touch是可以指定最后修改时间的!也就是说,<code>touch --date=&quot;2017-05-25 12:00:00&quot; reload&quot;</code>,这个命令可以将reload的最后修改时间改回去!<br>人与人之间最基本的信任呢.</p>
<h3 id="Stat"><a href="#Stat" class="headerlink" title="Stat"></a>Stat</h3><p>放心,<code>stat reload</code>这个命令还是可以看出问题来的.</p>
<pre><code>文件：&quot;reload&quot;
大小：0             块：0          IO 块：4096   普通空文件
    设备：808h/2056d    Inode：25039211    硬链接：1
权限：(0664/-rw-rw-r--)  Uid：( 1000/ catchen)   Gid：( 1000/ catchen)
    最近访问：2017-05-25 12:00:00.000000000 +0800
    最近更改：2017-05-25 12:00:00.000000000 +0800
    最近改动：2017-05-26 15:38:02.693909554 +0800
    创建时间：-
</code></pre><h3 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h3><p>这感觉,就像ls无法告诉我真实大小一样,现在连最后修改时间都不行了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Touch"><a href="#Touch" class="headerlink" title="Touch"></a>Touch</h3><p>touch这个命令,对于一个技术而言,应该是十分熟悉的.<br>像uwsgi这种就可以使用监听一个文件的方式来触发服]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="学习" scheme="http://catlittlechen.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dmesg]]></title>
    <link href="http://catlittlechen.com/2017/04/06/dmesg/"/>
    <id>http://catlittlechen.com/2017/04/06/dmesg/</id>
    <published>2017-04-06T12:09:19.000Z</published>
    <updated>2017-04-08T08:26:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7528_u5904"><a href="#u7528_u5904" class="headerlink" title="用处"></a>用处</h2><p>dmesg显示内核环缓冲区内容，一般我都是来查看比如oom之类的问题。之前我同事问我时间怎么算。我也是一直没记录这个公式，只放在印象笔记里面，现在就写在这里吧。</p>
<h2 id="u65F6_u95F4"><a href="#u65F6_u95F4" class="headerlink" title="时间"></a>时间</h2><p>dmesg的时间确实难看懂，可以通过以下的命令转化<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">date</span> -d <span class="string">"1970-01-01 UTC `echo "</span>$(<span class="keyword">date</span> +%s)-$(cat /<span class="keyword">proc</span>/uptime|cut -f <span class="number">1</span> -d<span class="string">' '</span>)+dmesg的时间戳<span class="string">"|bc ` seconds"</span></div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7528_u5904"><a href="#u7528_u5904" class="headerlink" title="用处"></a>用处</h2><p>dmesg显示内核环缓冲区内容，一般我都是来查看比如oom之类的问题。之前我同事问我时间怎么算。我也是一]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="学习" scheme="http://catlittlechen.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pyrobuf]]></title>
    <link href="http://catlittlechen.com/2017/04/02/pyrobuf/"/>
    <id>http://catlittlechen.com/2017/04/02/pyrobuf/</id>
    <published>2017-04-02T14:03:44.000Z</published>
    <updated>2017-04-02T14:30:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><p>Protocol Buffers 是一种轻便高效的结构化数据存储格式。我也是重度使用者。最近需要大量的实时处理Tb级别的数据，因此找到了protobuf的代替库 —- <a href="https://github.com/appnexus/pyrobuf" target="_blank" rel="external">pyrobuf</a></p>
<h2 id="pyrobuf"><a href="#pyrobuf" class="headerlink" title="pyrobuf"></a>pyrobuf</h2><p>pyrobuf是一个使用cython的pb库。一开始从他的github中，我确实看到了挺好的优化效果。</p>
<p>但是pyrobuf这个库的限制还是蛮大的，主要是对于proto文件。比如</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. 不能在message里面定义数据结构，不然转化的过程中，会找不到定义；</div><div class="line"><span class="number">2</span>. proto定义的过程中，message的定义不能加上分号为结尾；</div><div class="line"><span class="number">3</span>. <span class="class"><span class="keyword">enum</span>定义的类型，生成之后暂时还找不到映射会名称的方式；</span></div></pre></td></tr></table></figure>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install </span>pyrobuf</div><div class="line">pyrobuf --out-<span class="keyword">dir </span>out --<span class="keyword">build-dir </span><span class="keyword">build </span>--<span class="keyword">install</span></div></pre></td></tr></table></figure>
<p>这里面，out目录存放着生成的cython的代码，build目录存放这边一好的so文件，而install的参数添加之后，则pyrobuf会将编译好的so文件复制到python的library目录，这就可以直接使用。</p>
<h2 id="u7ED3_u679C"><a href="#u7ED3_u679C" class="headerlink" title="结果"></a>结果</h2><p>上线观察了下数据，原本20分钟转化的数据，只用了4分钟就转化完毕。不过数据内容还没有核对，晚点再查看吧~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><p>Protocol Buffers 是一种轻便高效的结构化数据存储格式。我也是重度使用者。最近]]>
    </summary>
    
      <category term="python" scheme="http://catlittlechen.com/tags/python/"/>
    
      <category term="pyrobuf" scheme="http://catlittlechen.com/tags/pyrobuf/"/>
    
      <category term="python" scheme="http://catlittlechen.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年不懂的spark(2)]]></title>
    <link href="http://catlittlechen.com/2017/03/30/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark-2/"/>
    <id>http://catlittlechen.com/2017/03/30/那些年不懂的spark-2/</id>
    <published>2017-03-30T11:38:28.000Z</published>
    <updated>2017-04-02T14:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="partitionBy__26amp_3B_26amp_3B_s3"><a href="#partitionBy__26amp_3B_26amp_3B_s3" class="headerlink" title="partitionBy &amp;&amp; s3"></a>partitionBy &amp;&amp; s3</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df<span class="selector-class">.write</span><span class="selector-class">.partitionBy</span>(<span class="string">'date'</span>, <span class="string">'index1'</span>, <span class="string">'index2'</span>, <span class="string">'index3'</span>).parquet(<span class="string">'some/path/'</span>)</div></pre></td></tr></table></figure>
<p>我用spark程序在输出parquet的过程中，通过partitionBy的column来自动生成文件夹。由于spark在写入的过程中，会扫描<code>some/path/</code>的所有目录。然后由于我的目录中有以<code>date</code>这个时间维度的标准的，这造成随着时间的推移，文件夹会越来越多，扫描的数据也就越来越慢。然后由于我使用的存储是s3，而s3不是一个真正意义上的文件系统，因而扫描文件夹的过程是一个调用api的过程，就更加慢了~</p>
<p>解决方式：可以写入hdfs等文件系统，再通过s3-dist-cp这个工具同步到s3上。</p>
<h2 id="so_u6587_u4EF6"><a href="#so_u6587_u4EF6" class="headerlink" title="so文件"></a>so文件</h2><p>spark 可以通过sparkContext.addFiles这个api，把so文件添加到任务实例上。</p>
<h2 id="u7ED3_u5C40"><a href="#u7ED3_u5C40" class="headerlink" title="结局"></a>结局</h2><p>未完待续</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="partitionBy__26amp_3B_26amp_3B_s3"><a href="#partitionBy__26amp_3B_26amp_3B_s3" class="headerlink" title="partitionBy &amp;&amp; s3"]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/tags/spark/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/categories/spark/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年不懂的spark]]></title>
    <link href="http://catlittlechen.com/2017/03/19/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark/"/>
    <id>http://catlittlechen.com/2017/03/19/那些年不懂的spark/</id>
    <published>2017-03-19T02:31:34.000Z</published>
    <updated>2017-03-26T01:30:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u611F_u609F"><a href="#u611F_u609F" class="headerlink" title="感悟"></a>感悟</h2><p>spark是一个好东西。流式处理数据，扩容方便，较大程度上的利用机器，学习还是很有必要的。这几个星期的使用，也踩了不少坑。世界上的很多东西，不是难，而是不知道。</p>
<h2 id="jsc"><a href="#jsc" class="headerlink" title="_jsc"></a>_jsc</h2><p>我是python的使用者，近来发现需要在启动spark的时候设置参数，但是在文档查找的过程中，只发现只有java的api文档里面有相关的参数设置，而python没有。囧~</p>
<p>最后发现python的<code>SparkContext</code>里，有一个参数是<code>_jsc</code>,其代表的恰恰就是java里面的 <code>SparkContext</code>。运行时可以通过这个对象，来实现参数的设置。</p>
<h2 id="parquet-enable-summary-metadata"><a href="#parquet-enable-summary-metadata" class="headerlink" title="parquet.enable.summary-metadata"></a>parquet.enable.summary-metadata</h2><p>上面提到的参数设置，其实就是这个参数了。由于我所使用的spark的版本是1.6.1，因此这个参数默认的值是true，2.0以后默认为false。详细可见 <a href="https://issues.apache.org/jira/browse/SPARK-15719" target="_blank" rel="external">issue</a></p>
<p>大概意思如下，spark在生成parquet文件的过程中，最后会扫描文件夹下的所有文件，并将文件的大致的详细汇总到文件夹目录的metadata文件，完成这个过程之后，在下次直接匹配这个文件夹的时候，spark会读取metadata，加快扫描的速度。</p>
<p>问题是生成这个metadata的文件是需要扫描所有文件的！而我生成paruqet的时候，是以追加的形式加入，频率还是蛮高的情况下，这就意味着我的spark程序会花费大量的时间在汇总这部分数据。并且汇总数据的过程是不会分布到多台机器上运行的。这就大大的降低了集群的利用率，其实也毫无必要。</p>
<p>因此spark生成parquet的过程中，可以选择关闭这个特性~</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sparkContext._jsc<span class="selector-class">.hadoopConfiguration</span><span class="selector-class">.set</span>(<span class="string">'parquet.enable.summary-metadata'</span>, <span class="string">'false'</span>)</div></pre></td></tr></table></figure>
<h2 id="partitionBy"><a href="#partitionBy" class="headerlink" title="partitionBy"></a>partitionBy</h2><p>一开始我一直纠结了很多问题，output的分类就是其中一个。而<code>partitonBy</code>完美地解决了我的需求。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df<span class="selector-class">.write</span><span class="selector-class">.partitionBy</span>(<span class="string">'index1'</span>, <span class="string">'index2'</span>, <span class="string">'index3'</span>).parquet(<span class="string">'some/path/'</span>)</div></pre></td></tr></table></figure>
<p>以上的代码中，<code>df</code>为一个dataFrame的数据集。</p>
<p>这段代码可以根据index1, index2, index3这几个columns来分类，将数据自动分为如下的目录结构保存.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">some/path/i<span class="symbol">ndex1</span>=&#123;i<span class="symbol">ndex1</span>&#125;/i<span class="symbol">ndex2</span>=&#123;i<span class="symbol">ndex2</span>&#125;/i<span class="symbol">ndex3</span>=&#123;i<span class="symbol">ndex3</span>&#125;/part-****.parquet</div></pre></td></tr></table></figure>
<p>之前还傻乎乎地groupBy数据，然后用了collect这个算子，因而需要读取所有文件，就有内存问题等存在。</p>
<h2 id="binaryFiles"><a href="#binaryFiles" class="headerlink" title="binaryFiles"></a>binaryFiles</h2><p>这个不算坑，只是自己没有注意到而已。</p>
<p>之前都是使用<code>textFile</code>的格式读取文本文件，这个过程中，没有指定<code>minPartition</code>，而<code>minPartition</code>的值也基本默认为文本文件的个数。但是<code>binaryFiles</code>不是。程序在默认读取大量二进制文件之后，并没有选择分开，而是<code>minPartition</code>为1，因此这里需要手动指定。</p>
<h2 id="parquet__26amp_3B_26amp_3B_sparkSQL"><a href="#parquet__26amp_3B_26amp_3B_sparkSQL" class="headerlink" title="parquet &amp;&amp; sparkSQL"></a>parquet &amp;&amp; sparkSQL</h2><p>sparkSQL太杀手级了~</p>
<p>parquet是列存储数据模式，可以大大的减少存储的文件大小，减少扫描过程中的大小。效率惊人~</p>
<p>sparkSQL在读取文件夹目录下所有文件的过程中，存在一个特定<code>partition auto-discovery</code>的特性。在spark的文档中有详细的记载。大概如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = sqlContext<span class="selector-class">.read</span><span class="selector-class">.parquet</span>(/some/path)</div></pre></td></tr></table></figure>
<p>如果<code>/some/path</code>下有目录如下<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/some/path</span></div><div class="line">	-<span class="ruby">- <span class="regexp">/index1=h1/index</span>2=f1/</span></div><div class="line"><span class="ruby">	-- <span class="regexp">/index1=h1/index</span>2=f2/</span></div><div class="line"><span class="ruby">	-- <span class="regexp">/index1=h2/index</span>2=f1/</span></div><div class="line"><span class="ruby">	-- <span class="regexp">/index1=h2/index</span>2=f2/</span></div></pre></td></tr></table></figure></p>
<p>则最后生成的sparkSQL的table里面，将会自动的加入index1, index2的column，当你使用index1来查询时，即</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">df</span><span class="selector-class">.registerTempTable</span>(<span class="string">"log"</span>)</div><div class="line"><span class="selector-tag">sqlContext</span><span class="selector-class">.sql</span>(<span class="string">"SELECT * FROM log WHERE index1 = h1"</span>)</div></pre></td></tr></table></figure>
<p>这个过程中，会自动的只扫描index1=h1的目录下的文件。<br>缺点是我喜欢使用通配符的形式来读取，结果通配的列就不存在了~<br>sad~</p>
<h2 id="u7ED3_u5C40"><a href="#u7ED3_u5C40" class="headerlink" title="结局"></a>结局</h2><p>未完待续~</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u611F_u609F"><a href="#u611F_u609F" class="headerlink" title="感悟"></a>感悟</h2><p>spark是一个好东西。流式处理数据，扩容方便，较大程度上的利用机器，学习还是很有必要的。这几个星期的使]]>
    </summary>
    
      <category term="踩坑日记" scheme="http://catlittlechen.com/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/tags/spark/"/>
    
      <category term="spark" scheme="http://catlittlechen.com/categories/spark/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[向2016致敬]]></title>
    <link href="http://catlittlechen.com/2017/01/25/%E5%90%912016%E8%87%B4%E6%95%AC/"/>
    <id>http://catlittlechen.com/2017/01/25/向2016致敬/</id>
    <published>2017-01-25T10:26:51.000Z</published>
    <updated>2017-02-20T13:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>  2016年的我，你好，我是2017年的你。拖了很久，我才开始写这一封信给你，来告诉你，这一年的故事。先给你的2016年打一个分吧，87分，满分100分。</p>
<p>  2016年，在历经3年的努力下，你终于将自己多年的积蓄给父母买了一个房子，过年回家的时候，看到父母忙忙碌碌地整理房子，心情十分复杂。十几年来，当第一次懂事的时候，你就知道父母一直希望拥有这么一个属于自己的房子，只是一直没有能力。感谢2016年的你，在外包和工作等压力下，完成了这个心愿，过去3年，至少这件心愿，你完成了。不过，2016年的你，已经把所有的积蓄都花完了，苦了2017年的我了。你还记得你曾经答应嘻嘻给她在广州一个家么？我知道你一直都还记得，只是说，你已经尽力了。算了，那就让2017年的我好好努力吧。</p>
<p>  说到赚钱这一方面，2016年的你，很感谢你守住了另外一份承诺。没有在你身边的大环境的情况下，你做类似夺宝之类的产品。虽然2016年的你也没有推出个人作品，不管是CleverKid还是Say，就等2017年的我来完成吧。我知道努力坚持自己是有多难，感谢你坚持下来了。2017年的我也会好好坚持本心的。</p>
<p>  你是一个喜欢数学的理科生，但是这一年里面的工作其实大部分都和数学的相关性不大，其实你也没能够发挥出自己的特长。这也和你现在所在的工作岗位有关系吧。不过没关系，自己好好学习吧。现在大数据和人工智能这两方面都是比较热门的，也是十分适合你的工作，希望你可以好好珍惜。</p>
<p>  2017年的我，比起你而言，确实是长大了。我知道，也许选择比努力更加重要，你创造的多少价值，才能得到多少报酬。因此，希望我们可以创造自己的价值。想想2016年的年初，你还在抱怨年终太少之类的话，现在想想自己还是太幼稚了，你啊，确实是没有创造足够的价值，对吧？没事，我们这种人就是天生的骄傲型，相信天赋，过去努力积累的实例和未来的自己。纵使我们徘徊在现实和梦想之间，我们也会去看看梦想的世界，如果就这么屈服于现实，怎么知道世界的美好呢？</p>
<p>  不过，2016年的时候，你还是有几点是做得不够好的。首先，你发脾气了，虽然发脾气不是一件什么大不了的事情，但是事实上，在某些时候你不应该发脾气，比如对待嘻嘻的时候。人嘛，往往会宽容那些不熟的人，却无法容忍自己人的错误。这点希望以后可以改改。第二点不好的地方，话说，你学习swift做ios也好，机器学习也罢，要学习深一些，你现在两门的基础都没有打好，2016年反而觉得有点浪费了。后端没深入学习，反而学了两个兴趣方面，现在3个方面都没有好的发展。这样子不是很好。2017年的时候要好好选择一种，然后制定计划，好好学习。第三点，2016年，你从游戏转到了广告，恭喜你，先走出了一个温床，进入了另外一个温床~~告诉你哦，你还是得好好努力的。</p>
<p>  2016年的我，我知道你丢失了很多美好，我会在2017年，帮你找回来的。我相信你的骄傲，会有一天可以看到你的美好笑容和幸福。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  2016年的我，你好，我是2017年的你。拖了很久，我才开始写这一封信给你，来告诉你，这一年的故事。先给你的2016年打一个分吧，87分，满分100分。</p>
<p>  2016年，在历经3年的努力下，你终于将自己多年的积蓄给父母买了一个房子，过年回家的时候，看到父母]]>
    </summary>
    
      <category term="生活" scheme="http://catlittlechen.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="活着" scheme="http://catlittlechen.com/categories/%E6%B4%BB%E7%9D%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[elasticsearch系列笔记(六)  索引]]></title>
    <link href="http://catlittlechen.com/2016/08/21/es6/"/>
    <id>http://catlittlechen.com/2016/08/21/es6/</id>
    <published>2016-08-21T12:37:01.000Z</published>
    <updated>2017-03-25T14:12:44.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u521B_u5EFA_u7D22_u5F15"><a href="#u521B_u5EFA_u7D22_u5F15" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PUT /my_index</div><div class="line">&#123;</div><div class="line">    <span class="string">"settings"</span> &#123;&#125;</div><div class="line">    <span class="string">"mappings"</span>: &#123;</div><div class="line">        <span class="string">"type_one"</span>:&#123;&#125;,</div><div class="line">        <span class="string">"type_two"</span>:&#123;&#125;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u5220_u9664_u7D22_u5F15"><a href="#u5220_u9664_u7D22_u5F15" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> /my_index</div></pre></td></tr></table></figure>
<h4 id="settings_3A"><a href="#settings_3A" class="headerlink" title="settings:"></a>settings:</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">number<span class="number">_</span><span class="keyword">of</span><span class="number">_</span>shards    主索引的个数</div><div class="line">number<span class="number">_</span><span class="keyword">of</span><span class="number">_</span>replicas 复制分片的个数</div></pre></td></tr></table></figure>
<p>分析器,这个很重要，合理的使用分析器，可以让你的es拥有合理的性能</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u521B_u5EFA_u7D22_u5F15"><a href="#u521B_u5EFA_u7D22_u5F15" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight xq]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/tags/elasticsearch/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/categories/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[elasticsearch系列笔记(五) 结构化查询]]></title>
    <link href="http://catlittlechen.com/2016/08/12/es5/"/>
    <id>http://catlittlechen.com/2016/08/12/es5/</id>
    <published>2016-08-12T13:16:59.000Z</published>
    <updated>2017-03-25T14:07:48.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u7ED3_u6784_u5316_u67E5_u8BE2Query_DSL"><a href="#u7ED3_u6784_u5316_u67E5_u8BE2Query_DSL" class="headerlink" title="结构化查询Query DSL"></a>结构化查询Query DSL</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">    &#123;</div><div class="line">        <span class="string">"query"</span>: &#123;</div><div class="line"><span class="symbol">            QUERY_NAME:</span> &#123;</div><div class="line"><span class="symbol">                FIELD_NAME:</span> &#123;</div><div class="line"><span class="symbol">                    ARGUMENT:</span> VALUE,</div><div class="line"><span class="symbol">                    ARGUMENT:</span> VALUE,</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="u8FC7_u6EE4_u67E5_u8BE2Filter_DSL"><a href="#u8FC7_u6EE4_u67E5_u8BE2Filter_DSL" class="headerlink" title="过滤查询Filter DSL"></a>过滤查询Filter DSL</h4><h4 id="term__u8FC7_u6EE4"><a href="#term__u8FC7_u6EE4" class="headerlink" title="term 过滤"></a>term 过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">        <span class="string">"&#123;field&#125;"</span>: &#123;value&#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="terms__u8FC7_u6EE4"><a href="#terms__u8FC7_u6EE4" class="headerlink" title="terms 过滤"></a>terms 过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"&#123;field&#125;"</span>: [ &#123;value1&#125;, &#123;value2&#125; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="range_u8FC7_u6EE4"><a href="#range_u8FC7_u6EE4" class="headerlink" title="range过滤"></a>range过滤</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"range"</span>: &#123;</div><div class="line">        <span class="string">"&#123;field&#125;"</span>: &#123;</div><div class="line">            <span class="string">"gte"</span>: <span class="number">20</span>, //<span class="keyword">gt</span> <span class="keyword">gte</span>, <span class="keyword">lt</span> <span class="keyword">lte</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="exits_2C_missing_u8FC7_u6EE4"><a href="#exits_2C_missing_u8FC7_u6EE4" class="headerlink" title="exits, missing过滤"></a>exits, missing过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"exists"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"&#123;field&#125;"</span>,//存在这个类型</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u8FC7_u6EE4"><a href="#u8FC7_u6EE4" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">        <span class="string">"must"</span>: &#123;&#125;,//必须符合</div><div class="line">        <span class="string">"must_not"</span>: &#123;&#125;,//必须不符合</div><div class="line">        <span class="string">"should"</span>: &#123;&#125;,//必须符合其中一个条件</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="match_all"><a href="#match_all" class="headerlink" title="match_all"></a>match_all</h4><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><h4 id="multi_match"><a href="#multi_match" class="headerlink" title="multi_match"></a>multi_match</h4><h4 id="u67E5_u8BE2_u6BD4_u8FC7_u6EE4_u591A_u4E86_u76F8_u5173_u6027_u8BA1_u7B97"><a href="#u67E5_u8BE2_u6BD4_u8FC7_u6EE4_u591A_u4E86_u76F8_u5173_u6027_u8BA1_u7B97" class="headerlink" title="查询比过滤多了相关性计算"></a>查询比过滤多了相关性计算</h4><h4 id="u590D_u5408_u67E5_u8BE2"><a href="#u590D_u5408_u67E5_u8BE2" class="headerlink" title="复合查询"></a>复合查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   	<span class="attr">"filtered"</span>: &#123;</div><div class="line">       	<span class="attr">"query"</span>:  &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"email"</span>: <span class="string">"business opportunity"</span> &#125;&#125;,</div><div class="line">       	<span class="attr">"filter"</span>: &#123; <span class="attr">"term"</span>:  &#123; <span class="attr">"folder"</span>: <span class="string">"inbox"</span> &#125;&#125;</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u9A8C_u8BC1_u67E5_u8BE2_uFF0C_u89E3_u91CA_u9519_u8BEF"><a href="#u9A8C_u8BC1_u67E5_u8BE2_uFF0C_u89E3_u91CA_u9519_u8BEF" class="headerlink" title="验证查询，解释错误"></a>验证查询，解释错误</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET <span class="regexp">/gb/</span>tweet<span class="regexp">/_validate/</span>query?explain</div><div class="line">   	&#123;</div><div class="line">       	<span class="string">"query"</span>: &#123;</div><div class="line">           	*********</div><div class="line">       	&#125;</div><div class="line">   	&#125;</div></pre></td></tr></table></figure>
<h4 id="u6392_u5E8F_uFF0C_u5728query_u4E4B_u540E"><a href="#u6392_u5E8F_uFF0C_u5728query_u4E4B_u540E" class="headerlink" title="排序，在query之后"></a>排序，在query之后</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">   	<span class="string">"query"</span>: &#123;</div><div class="line">   	&#125;,</div><div class="line">   	<span class="string">"sort"</span>: &#123;</div><div class="line">   		<span class="string">"&#123;field&#125;"</span>:&#123;</div><div class="line">   			<span class="string">"order"</span>: <span class="string">"desc"</span></div><div class="line">   		&#125;,</div><div class="line">   		<span class="string">"&#123;field&#125;"</span>:&#123;</div><div class="line">   			<span class="string">"order"</span>: <span class="string">"asc"</span>,</div><div class="line">   			<span class="string">"mode"</span>: <span class="string">"min"</span> //field为多个值时</div><div class="line">       	&#125;</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u7ED3_u6784_u5316_u67E5_u8BE2Query_DSL"><a href="#u7ED3_u6784_u5316_u67E5_u8BE2Query_DSL" class="headerlink" title="结构化查询Query DSL">]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/tags/elasticsearch/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/categories/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[elasticsearch系列笔记(四) 搜索]]></title>
    <link href="http://catlittlechen.com/2016/08/09/es4/"/>
    <id>http://catlittlechen.com/2016/08/09/es4/</id>
    <published>2016-08-09T00:51:19.000Z</published>
    <updated>2017-03-25T14:06:43.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u8DEF_u7531_u6587_u6863_u5230_u5206_u7247"><a href="#u8DEF_u7531_u6587_u6863_u5230_u5206_u7247" class="headerlink" title="路由文档到分片"></a>路由文档到分片</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shard = hash<span class="comment">(routing)</span> <span class="meta">%</span> <span class="symbol">number_of_primary_shards</span></div></pre></td></tr></table></figure>
<h4 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h4><pre><code>请求是否需要等待复制分区的成功响应，默认为sync等待，async异步不等待。 
</code></pre><h4 id="consistency"><a href="#consistency" class="headerlink" title="consistency"></a>consistency</h4><pre><code>文档在写入的时候，需要规定一定的分区更新成功之后，才会返回客户端成功，如果节点不够，则不能删除或者索引任何文件

int((primary + number_of_replicas) / 2) + 1
</code></pre><h4 id="u7A7A_u641C_u7D22"><a href="#u7A7A_u641C_u7D22" class="headerlink" title="空搜索"></a>空搜索</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /<span class="variable">_search</span></div><div class="line">    hits:</div><div class="line">        total 总文档数</div><div class="line">        hits 匹配到的数量</div><div class="line">        max_score 最大相关性</div><div class="line">    took：请求时间</div><div class="line">    <span class="variable">_shards</span>: 用到的分片大小和类型</div><div class="line">GET /<span class="variable">_search</span>?<span class="built_in">size</span>=&#123;<span class="built_in">size</span>&#125;&amp;<span class="keyword">from</span>=&#123;<span class="keyword">from</span>&#125;</div><div class="line">    从<span class="keyword">from</span>开始最多<span class="built_in">size</span>个内容返回</div></pre></td></tr></table></figure>
<h4 id="u7B80_u6613_u641C_u7D22"><a href="#u7B80_u6613_u641C_u7D22" class="headerlink" title="简易搜索"></a>简易搜索</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /_all/&#123;type&#125;/_search?q=&#123;field&#125;:&#123;key&#125;</div><div class="line">GET /_all/&#123;type&#125;/_search?q=`urlencode(+&#123;field&#125;:&#123;key&#125;-&#123;field&#125;:&#123;key&#125;)` +条件满足 -条件不满足</div><div class="line">GET /_all/&#123;type&#125;/_search?q=&#123;value&#125; 查询包含<span class="keyword">value</span>的文档</div></pre></td></tr></table></figure>
<h4 id="u65B0_u5EFA_u7D22_u5F15_uFF0C_u8BBE_u7F6E_u5206_u6790_u5668"><a href="#u65B0_u5EFA_u7D22_u5F15_uFF0C_u8BBE_u7F6E_u5206_u6790_u5668" class="headerlink" title="新建索引，设置分析器"></a>新建索引，设置分析器</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PUT /&#123;index&#125;</div><div class="line">&#123;</div><div class="line">    <span class="string">"mappings"</span>: &#123;</div><div class="line">        <span class="string">"&#123;type&#125;"</span>: &#123;</div><div class="line">            <span class="string">"properties"</span>: &#123;</div><div class="line">                <span class="string">"field"</span>: &#123;</div><div class="line">                    <span class="string">"type"</span>: <span class="string">""</span>, //string, date, long, object(嵌套)</div><div class="line">                    <span class="string">"index"</span>: <span class="string">""</span>, // analyzed, not_analyzed, no</div><div class="line">                    <span class="string">"analyzer"</span>: <span class="string">""</span>, // english, space</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u6D4B_u8BD5_u5206_u6790_u5668"><a href="#u6D4B_u8BD5_u5206_u6790_u5668" class="headerlink" title="测试分析器"></a>测试分析器</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">GET /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/_analyze?field=</span><span class="template-variable">&#123;field&#125;</span><span class="xml">&amp;text=</span><span class="template-variable">&#123;value&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u8DEF_u7531_u6587_u6863_u5230_u5206_u7247"><a href="#u8DEF_u7531_u6587_u6863_u5230_u5206_u7247" class="headerlink" title="路由文档到分片"><]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/tags/elasticsearch/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/categories/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[elasticsearch系列笔记(三) 基本API]]></title>
    <link href="http://catlittlechen.com/2016/08/04/es3/"/>
    <id>http://catlittlechen.com/2016/08/04/es3/</id>
    <published>2016-08-04T12:11:51.000Z</published>
    <updated>2017-03-25T14:05:23.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u6DFB_u52A0_u6587_u6863_2C_u81EA_u5B9A_u4E49ID"><a href="#u6DFB_u52A0_u6587_u6863_2C_u81EA_u5B9A_u4E49ID" class="headerlink" title="添加文档,自定义ID"></a>添加文档,自定义ID</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PUT /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</div><div class="line">&#123;</div><div class="line">    <span class="string">"field"</span>: <span class="string">"value"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u6DFB_u52A0_u6587_u6863_uFF0C_u8FD9_u65F6_u5019_u7684ID_u662FES_u81EA_u52A8_u751F_u6210_uFF0C_u4E3A22_u4F4D_u7684UUIDS"><a href="#u6DFB_u52A0_u6587_u6863_uFF0C_u8FD9_u65F6_u5019_u7684ID_u662FES_u81EA_u52A8_u751F_u6210_uFF0C_u4E3A22_u4F4D_u7684UUIDS" class="headerlink" title="添加文档，这时候的ID是ES自动生成，为22位的UUIDS"></a>添加文档，这时候的ID是ES自动生成，为22位的UUIDS</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /&#123;index&#125;/&#123;type&#125;/</div><div class="line">&#123;</div><div class="line">    <span class="string">"field"</span>: <span class="string">"value"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u83B7_u5F97_u6587_u6863"><a href="#u83B7_u5F97_u6587_u6863" class="headerlink" title="获得文档"></a>获得文档</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;?pretty</div><div class="line">&#123;</div><div class="line">    <span class="string">"_index"</span> :   <span class="string">"&#123;index&#125;"</span>,</div><div class="line">    <span class="string">"_type"</span> :    <span class="string">"&#123;type&#125;"</span>,</div><div class="line">    <span class="string">"_id"</span> :      <span class="string">"&#123;id&#125;"</span>,</div><div class="line">    <span class="string">"_version"</span> : <span class="number">1</span>,</div><div class="line">    <span class="string">"found"</span> :    true, //是否找到，<span class="number">404</span>同步返回</div><div class="line">    <span class="string">"_source"</span> :  &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"value"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u83B7_u5F97_u6587_u6863_u7684_u7279_u5B9A_u5C5E_u6027"><a href="#u83B7_u5F97_u6587_u6863_u7684_u7279_u5B9A_u5C5E_u6027" class="headerlink" title="获得文档的特定属性"></a>获得文档的特定属性</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;/&#123;key&#125;?pretty</div><div class="line">&#123;</div><div class="line">    <span class="string">"&#123;key&#125;"</span>: <span class="string">"value"</span></div><div class="line">&#125;</div><div class="line">key 为上面json的值</div></pre></td></tr></table></figure>
<h4 id="u83B7_u5F97_u6587_u6863_u7684_u7279_u5B9A_u503C"><a href="#u83B7_u5F97_u6587_u6863_u7684_u7279_u5B9A_u503C" class="headerlink" title="获得文档的特定值"></a>获得文档的特定值</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;?pretty&amp;_source=&#123;field1&#125;,&#123;field2&#125;</div><div class="line">&#123;</div><div class="line">    <span class="string">"_index"</span> :   <span class="string">"&#123;index&#125;"</span>,</div><div class="line">    <span class="string">"_type"</span> :    <span class="string">"&#123;type&#125;"</span>,</div><div class="line">    <span class="string">"_id"</span> :      <span class="string">"&#123;id&#125;"</span>,</div><div class="line">    <span class="string">"_version"</span> : <span class="number">1</span>,</div><div class="line">    <span class="string">"found"</span> :    true, //是否找到，<span class="number">404</span>同步返回</div><div class="line">    <span class="string">"_source"</span> :  &#123;</div><div class="line">        <span class="string">"field1"</span>: <span class="string">"value"</span>,</div><div class="line">        <span class="string">"field2"</span>: <span class="string">"value"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u68C0_u67E5_u6587_u6863_u662F_u5426_u5B58_u5728"><a href="#u68C0_u67E5_u6587_u6863_u662F_u5426_u5B58_u5728" class="headerlink" title="检查文档是否存在"></a>检查文档是否存在</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">HEAD /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<h4 id="u66F4_u65B0_u6587_u6863_u7684_u65F6_u5019_uFF0C_u5199_u6CD5_u548C_u63D2_u5165_u65F6_u76F8_u540C"><a href="#u66F4_u65B0_u6587_u6863_u7684_u65F6_u5019_uFF0C_u5199_u6CD5_u548C_u63D2_u5165_u65F6_u76F8_u540C" class="headerlink" title="更新文档的时候，写法和插入时相同"></a>更新文档的时候，写法和插入时相同</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_<span class="keyword">version</span>会递增</div></pre></td></tr></table></figure>
<h4 id="u521B_u5EFA_u6587_u6863_uFF0C_u6210_u529F_u521B_u5EFA_u7684_u65F6_u5019_uFF0C_u8FD4_u56DE201_uFF0C_u5931_u8D25_u8FD4_u56DE409"><a href="#u521B_u5EFA_u6587_u6863_uFF0C_u6210_u529F_u521B_u5EFA_u7684_u65F6_u5019_uFF0C_u8FD4_u56DE201_uFF0C_u5931_u8D25_u8FD4_u56DE409" class="headerlink" title="创建文档，成功创建的时候，返回201，失败返回409"></a>创建文档，成功创建的时候，返回201，失败返回409</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">?op_type=create</span></div><div class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">/_create</span></div></pre></td></tr></table></figure>
<h4 id="u5220_u9664_u6587_u6863_uFF0C_u5931_u8D25_u8FD4_u56DE404"><a href="#u5220_u9664_u6587_u6863_uFF0C_u5931_u8D25_u8FD4_u56DE404" class="headerlink" title="删除文档，失败返回404"></a>删除文档，失败返回404</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> /&#123;<span class="keyword">index</span>&#125;/&#123;<span class="keyword">type</span>&#125;/&#123;<span class="keyword">id</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="u66F4_u65B0_u67D0_u4E2A_u7279_u5B9A_u7248_u672C_u7684_u6587_u6863_uFF0C_u7528_u4E8E_u63A7_u5236_u5E76_u53D1_u9519_u8BEF_uFF0Cversion_type_u8BBE_u7F6E_u4E86_u7528_u6B64_u65F6_u7684version_u6765_u8BBE_u7F6E_u6587_u6863_u7684version"><a href="#u66F4_u65B0_u67D0_u4E2A_u7279_u5B9A_u7248_u672C_u7684_u6587_u6863_uFF0C_u7528_u4E8E_u63A7_u5236_u5E76_u53D1_u9519_u8BEF_uFF0Cversion_type_u8BBE_u7F6E_u4E86_u7528_u6B64_u65F6_u7684version_u6765_u8BBE_u7F6E_u6587_u6863_u7684version" class="headerlink" title="更新某个特定版本的文档，用于控制并发错误，version_type设置了用此时的version来设置文档的version"></a>更新某个特定版本的文档，用于控制并发错误，version_type设置了用此时的version来设置文档的version</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">?version=</span><span class="template-variable">&#123;version&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">?version=</span><span class="template-variable">&#123;version&#125;</span><span class="xml">&amp;version_type=external</span></div></pre></td></tr></table></figure>
<h4 id="u66F4_u65B0_u6587_u6863_u7684_u90E8_u5206_u5185_u5BB9_uFF0C_u5408_u5E76_u6587_u6863"><a href="#u66F4_u65B0_u6587_u6863_u7684_u90E8_u5206_u5185_u5BB9_uFF0C_u5408_u5E76_u6587_u6863" class="headerlink" title="更新文档的部分内容，合并文档"></a>更新文档的部分内容，合并文档</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">POST /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;/_<span class="keyword">update</span></div></pre></td></tr></table></figure>
<h4 id="u811A_u672C_u662F_u4E00_u4E9B_u5947_u602A_u7684_u903B_u8F91_uFF0C_u4E0D_u8FC7_u86EE_u597D_u73A9_u7684_u3002"><a href="#u811A_u672C_u662F_u4E00_u4E9B_u5947_u602A_u7684_u903B_u8F91_uFF0C_u4E0D_u8FC7_u86EE_u597D_u73A9_u7684_u3002" class="headerlink" title="脚本是一些奇怪的逻辑，不过蛮好玩的。"></a>脚本是一些奇怪的逻辑，不过蛮好玩的。</h4><h4 id="u68C0_u7D22_u591A_u4E2A_u6587_u6863"><a href="#u68C0_u7D22_u591A_u4E2A_u6587_u6863" class="headerlink" title="检索多个文档"></a>检索多个文档</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> /_mget</div><div class="line">&#123;</div><div class="line">    <span class="string">"docs"</span>: [</div><div class="line">        &#123;</div><div class="line"><span class="comment">            *******</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="u6279_u91CF_u64CD_u4F5C_uFF0C_u4EE5_u6362_u884C_u7B26_u6765_u5224_u65AD_uFF0C_u9632_u6B62_u4E0D_u5FC5_u8981_u7684json_u89E3_u6790_u7B49_u6570_u636E_u62F7_u8D1D_u3002"><a href="#u6279_u91CF_u64CD_u4F5C_uFF0C_u4EE5_u6362_u884C_u7B26_u6765_u5224_u65AD_uFF0C_u9632_u6B62_u4E0D_u5FC5_u8981_u7684json_u89E3_u6790_u7B49_u6570_u636E_u62F7_u8D1D_u3002" class="headerlink" title="批量操作，以换行符来判断，防止不必要的json解析等数据拷贝。"></a>批量操作，以换行符来判断，防止不必要的json解析等数据拷贝。</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">POST /_bulk</div><div class="line">&#123; action: &#123;metadata &#125;&#125; \n</div><div class="line">&#123; request body &#125; \n</div><div class="line">&#123; action: &#123;metadata &#125;&#125; \n</div><div class="line">&#123; request body &#125; \n</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u6DFB_u52A0_u6587_u6863_2C_u81EA_u5B9A_u4E49ID"><a href="#u6DFB_u52A0_u6587_u6863_2C_u81EA_u5B9A_u4E49ID" class="headerlink" title="]]>
    </summary>
    
      <category term="学习" scheme="http://catlittlechen.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/tags/elasticsearch/"/>
    
      <category term="elasticsearch" scheme="http://catlittlechen.com/categories/elasticsearch/"/>
    
  </entry>
  
</feed>
