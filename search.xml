<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[向2017致敬]]></title>
      <url>/2018/02/17/%E5%90%912017%E8%87%B4%E6%95%AC/</url>
      <content type="html"><![CDATA[<h2 id="大概"><a href="#大概" class="headerlink" title="大概"></a>大概</h2><p>大年初一结束了。每年过年的放假，除了陪陪家人，次要的事情就是反思过去。</p>
<p>2017年，这个鸡年，打个分的话，只有59分，差一分及格。</p>
<p>也许，这是涅槃重生吧。为了不变成自己讨厌的人。为了听从自己心中最直白的话。</p>
<h2 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h2><p>对不起，爷爷。在日本跑了许久买回来的长寿符，我没能交到您的手中。听姐姐说，您走的时候，十分安详。从监控中，我看到您日渐消瘦，妈妈曾经暗示过我，但是我就是不相信。对不起，虽然靠着美林和消炎药，我才送了您人生的最后一程。而后的一个月，反复的发烧和咳嗽，一次又一次得提醒着我，这段悲伤的记忆。<br>对不起，老猫。我还记得第一次你来我家的时候，是10年前了。那时候你很害怕，一下子钻到沙发底下。从此，不愿意再走出这个家一步。妹妹说，你很懂事，知道也许爷爷去世后，我们就会去新家，而你不想去，就先离开了。爸爸并没有告诉我们出外的孩子，你什么时候离开的，依照习俗被放在了哪条河流里。回家后，没听到你的叫声，都不太习惯了。<br>对不起，妈妈。也许从小到大，我从来没让您失望过，也基本没有反驳过您。新家入宅后，您向我提出希望可以娶嘻嘻回家。而我拒绝了。也许不愿意我的人生再这样子按照世俗的轨迹去走，也许只是叛逆，也许为了自由人生，也许为了逃避责任吧。后来爸爸说您病了一场，十分惭愧。<br>对不起，爸爸。如果当初我做了最好的选择，那至少我现在有能力可以买下您现在的店铺。让您可以有个地方安心工作，即使喝喝茶也好。假以时日，我一定会买回来的。<br>对不起，妹妹。其实当初你接触微商的时候，我就想过，你会不会用到他们假的产品。但是我不知道后果会如此的严重。我后悔了。如果当初我阻止你，也不至于到了如今的地步。让你忍受了痛苦长达两年之久。你现在的痛苦，我有着大部分的责任。还好最近看到你在恢复，一切都会好的。<br>对不起，嘻嘻。我将毕业两年来的所有收入给了家里买房的时候，我很怕你离开我。可是你不但没有离开，还害怕我工作太累，不希望我去加班的公司。你给了我时间思考我的人生。可是我还是没能想到如何创造价值。你说我坚守的底线才错过那么多机会，但是也没强迫我做任何事。谢谢你。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>我从偶玩部门，去到国内广告，再借去海外部门，辗转最后到基础部门。这几年里面，基本上跑遍了整个公司所有部门。其实，公司性格测试的结果，我还是蛮认同的。我属于学者型的人，15蓝的典型理科生，喜欢学习新的事物，不喜欢重复劳动，洁癖一样的业务编码习惯。<br>小公司最好的地方，莫过于可以挑战很多新的技术，但是坏处也是需要短时间内拿出成果，不然很容易被否定。不过这也就是时代的需求。对于新的技术的从学习到应有，是需要快速交付的。只有在实践中，再慢慢探索，踩坑，填坑，最后从自己原有的架构里面，转化出新的架构。<br>不过，小公司不能好好地安心研究技术。因为大部分的小公司都是为了盈利而努力着。而技术大部分程度上都无法左右业务，所以结果上，福利会比大公司差很多。而以利润为基础的制度，感觉高层的错误决策，最终还是得下层的员工来承担。吧啦巴拉巴拉吧喇叭。<br>做了老板的同学和我说，工资和年终多少，大部分程度上并不是很所谓。但是一旦承诺了，而最终无论已任何理由少给或者不给，人心一下子就散了。不过为了所谓的什么什么，感觉公司的每个人都过得不容易。  </p>
<h2 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h2><p>2017年，有着很多误解、离别和伤痛。从挣扎，痛苦，沉默中慢慢重新看待这个世界。和大量的人接触，交换了人生的各种。2018开始了。对不起各位，我回来了。<br>在历史的长河里，自己像一个孤独无助的求学者。在喧嚣的路途中，静静地翻看着书籍。略去前人无数的重复的结论，探寻着世界自己无知的认知。不知道还可以好好看多久的书，多一页是一页吧。在阳光透过窗户时醒来，感受着温暖和生机，牢笼囚禁不住追求自由完美的心，愿拥有勇气面对多变的世界，愿拥有耐心面对不变的世界，愿拥有智慧去分辨两者，愿世界变得更加美好！！！</p>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx_header]]></title>
      <url>/2017/12/12/nginx-header/</url>
      <content type="html"><![CDATA[<h3 id="细节决定"><a href="#细节决定" class="headerlink" title="细节决定"></a>细节决定</h3><p>因为业务方的需求，需要在 nginx 那层做 ssl 等解析，然后将443端口过来的流量，proxy 到下层的80端口。业务层的机器上，同样也搭建了一个nginx，将流量根据 uri 分发到不同的服务上。</p>
<p>然后我犯错了。</p>
<p>在两层的 nginx 上，都有一个配置是 add_header <strong><strong>: </strong></strong>，所以放回的请求的 header 上，出现了两个相同 key 和相同 value 的 header。</p>
<p>所以当我用 curl 等命令请求数据的时候，可以完整的看到请求的 header 和 body。但是对于很多应用程序而言，这样子的 header 是非法的。</p>
<p>记得 http header 的问题之前也遇到过，golang在解析 header 的过程中，如果发现异常的时候，会直接放回40*，而不会有任何日志输出。当时还是新版本的特性，升级了golang版本后发版后，就让我开始怀疑人生。</p>
<p>总之，很多看起来不是很重要的细节，还是得了解。关键的时候，还是有用的。</p>
]]></content>
      
        <categories>
            
            <category> 踩坑日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[script]]></title>
      <url>/2017/11/03/script/</url>
      <content type="html"><![CDATA[<p>写golang的时候，很多人都是用fmt来调试的。因此，大量的输出没出都要重定向到文件，然后查看，有时候挺烦的。其实有个命令，可以帮忙。那就是 script。</p>
<p>命令行中直接运行<code>script</code>命令后，它会默认将屏幕出现的所有内容，写入 typescript 的文件里面。<br>通过<code>exit</code>可以退出记录模式。<br>接下来就可以通过<code>more typescript</code>查看调试输出了.</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> script </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kafka-replication]]></title>
      <url>/2017/10/25/kafka-replication/</url>
      <content type="html"><![CDATA[<h2 id="文章分享"><a href="#文章分享" class="headerlink" title="文章分享"></a>文章分享</h2><p><a href="https://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/" target="_blank" rel="noopener">好文</a></p>
<p>这里讲述了 partition 对于并发的重要性，其中介绍了 kafka 实现中，kafka 处理每一个 partition 都是对应一个线程的，所以多 partition 之间是写入是可以并发的。读取的时候，多个 consumer 消耗对应的 partition 是可以增加吞吐量的。</p>
<p><a href="https://docs.confluent.io/current/kafka/deployment.html#hardware" target="_blank" rel="noopener">好文</a><br>这里讲述了 kafka 对硬件的选择。</p>
<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><h3 id="add-broker"><a href="#add-broker" class="headerlink" title="add broker"></a>add broker</h3><p>kafka 加入一个 broker 只需要配置文件对了，直接起来就好了，没啥好说的。</p>
<h3 id="add-partitions"><a href="#add-partitions" class="headerlink" title="add partitions"></a>add partitions</h3><p>增加 partition 的话，通过<code>kafka-topics.sh</code>这个脚本即可。</p>
<pre><code>./kafka-topics.sh --alter --zookeeper 127.0.0.1:2181/kafka --partitions 10 --topic topic_test
</code></pre><h4 id="调整-partitions"><a href="#调整-partitions" class="headerlink" title="调整 partitions"></a>调整 partitions</h4><p>调整的话，是通过<code>kafka-reassign-partitions.sh</code>这个脚本提交任务的。具体教程网上蛮多的，还是多写一些吧。</p>
<h5 id="指定需要调整的-topics"><a href="#指定需要调整的-topics" class="headerlink" title="指定需要调整的 topics"></a>指定需要调整的 topics</h5><pre><code>{
      &quot;topics&quot;: [
        {&quot;topic&quot;:&quot;topic_test&quot;},
      ],
      &quot;version&quot;: 1
}
save to test.json
</code></pre><h5 id="生成调整后的-json"><a href="#生成调整后的-json" class="headerlink" title="生成调整后的 json"></a>生成调整后的 json</h5><pre><code>./kafka-reassign-partitions.sh --zookeeper 127.0.0.1:2181/kafka --topics-to-move-json-file ./test.json --broker-list &quot;0,1,2,3,4&quot; --generate
</code></pre><p>这里的 broker-list 是 kafka 配置文件里面 broker-id 的集合。<br>命令之后，会生成两个 json，一个是目前 partition 的分布，第二个是调整后的 partiton 分布，这里保存为 move.json。这里 kafka 是按照自己的算法生成的，实际上，并不是最优。所以最好对照目前 partition 的分布，自己再做调整。<br>原则有两个，1. Skewed, partition 分布要均匀；2. Leader Skewed, leader 分布要均匀。</p>
<h4 id="提交调整的-json"><a href="#提交调整的-json" class="headerlink" title="提交调整的 json"></a>提交调整的 json</h4><pre><code>./kafka-reassign-partitions.sh --zookeeper 127.0.0.1:2181/kafka --reassignment-json-file  move.json --execute
</code></pre><p>提交的任务是异步执行的，这个过程中网络磁盘IO都会很大，负载也会升高，所以需要注意。</p>
<h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><pre><code>./kafka-reassign-partitions.sh --zookeeper 127.0.0.1:2181/kafka --reassignment-json-file  move.json --verify
</code></pre><h3 id="指定-leader"><a href="#指定-leader" class="headerlink" title="指定 leader"></a>指定 leader</h3><p>指定 leader 的话，通过<code>kafka-preferred-replica-election.sh</code>这个脚本提交的。默认是选择了 Replicas 中，还出于 sycn 状态的broker的第一个。所以上面提交调整的 json，需要把这一条考虑进去，注意 broker 的顺序。</p>
<pre><code>./kafka-preferred-replica-election.sh --zookeeper 127.0.0.1:2181/kafka
</code></pre>]]></content>
      
        <categories>
            
            <category> kafka </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kafka]]></title>
      <url>/2017/10/10/kafka/</url>
      <content type="html"><![CDATA[<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>一大利器，以零拷贝，文件append之类好玩的优点，而被选择为了很多公司的数据总线，配置什么的就不多说了，Google等搜索引擎可以找到很多文章来介绍，那我就介绍下，我遇到的问题吧。</p>
<h2 id="formatVersion"><a href="#formatVersion" class="headerlink" title="formatVersion"></a>formatVersion</h2><p>  kafka从0.8版本到现在，message的format有了3个版本，其中v1，v2的差距不大，但是v3的版本为了batch而生，因而版本差异比较大。<br>  但是落地到文件的版本，是由kafka启动的配置文件中配置的。kafka为了兼容各个版本，在通讯协议中支持message版本之间的转化。但是这个转化势必在server端执行，会浪费不必要的CPU，因为，在使用kafka的过程中，最好是根据业务需要，统一server与client的messageFormatVersion。</p>
<h2 id="jmxtrans"><a href="#jmxtrans" class="headerlink" title="jmxtrans"></a>jmxtrans</h2><p>  kafka原生会暴露一个java系的监控接口，在kafka-server-start.sh中，可以看到JMX_PORT相关的配置。而jmxtrans是一个服务，可以将kafka—jmx中暴露出来的数据，整理写入ganglia中。配置可以看它的<a href="https://github.com/jmxtrans/jmxtrans" target="_blank" rel="noopener">github</a>，kafka的监控项可以看<a href="http://kafka.apache.org/documentation/#configuration" target="_blank" rel="noopener">官网</a></p>
<h2 id="kafka-manager"><a href="#kafka-manager" class="headerlink" title="kafka-manager"></a>kafka-manager</h2><p>  好吧，业务的同学都是喜欢有个页面的监控，所以嘛，找个yahoo的这个<a href="https://github.com/yahoo/kafka-manager" target="_blank" rel="noopener">监控</a>.配置简单，可以通过jmx的接口，查找到类似于consumerGroup的延迟，数据传输的监控，并且可以看到类似于out of Sync等。点到为止~</p>
<h2 id="replications"><a href="#replications" class="headerlink" title="replications"></a>replications</h2><p>  一个好的作品都是留给了使用者很多配置，很多很多配置。因此，kafka留了这个replication特性。如果你只关注性能，那么replication=1，每一个partition只有一份，这个在写入的时候，性能最佳，坏处就是单一个kafka实例失败的时候，这个partition就失败了。但是，一旦设置了replication&gt;1，那么kafka实例失败后，这个实例的partition只是outOfSync，重启等操作后，可以恢复。整个集群的partition还是可用的。</p>
]]></content>
      
        <categories>
            
            <category> kafka </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[whoiam]]></title>
      <url>/2017/09/24/whoiam/</url>
      <content type="html"><![CDATA[<p>你离开的第一周，生活继续。</p>
<p>我在手机的备忘录里面，记录了我自问的所有问题。只是我找不到答案。</p>
<p>最近发生了很多事情，我该记一记。</p>
<ol>
<li>这周刚好飞哥他们参加各种校招笔试面试，所以下班后也帮他们做做笔试，讲解各种遇到的知识点。但是只是他们临时抱佛脚而已，被问多了，自然露马脚。总觉得这么做不对，但是我也只能帮一些了。之前明明很多次提醒他们该做什么，似乎也没什么用。这是个人性格问题吧。毕竟肯好好看书的人，实在不多了。</li>
<li>我发现，身边好多擦边球的赚钱玩法，发现聚会的时候，都开始聊起这样子的话题。可我还是不喜欢，甚至难受。我在我可预见的未来里面，虽然看到了悲观的可能性，但是走一步看一步吧。我总觉得毕业了两年，还像一个学生。也许这也挺好的。可以脚踏实地，仰望星空的生活，是我这么多年，最大的欣慰了吧。我只是不想，活成我讨厌的那种人。</li>
<li>我在国内的那段时间内，我在想，我和叶同学，黄同学之间的区别。技术在我看来，是一种知识，需要不断尝试掌握的。他们身上，我和我很像的求知欲。但是黄同学毕竟是管理层，所以也在乎KPI，但是他的能力不容置疑。叶同学，人很nick，足够的亲和度，可以融洽整个团队。写了这个多，感觉我缺少的是决断的能力。干了这么多年，惭愧了。破而不立，是目前一个瓶颈，我知道什么场景适用什么技术架构，但是需要新的场景，我可以很快地否定不好的方案。但是自己却没办法提出更好的，甚至于完美的方案。</li>
<li>时间到底怎么了。公司一直在成长，也许大家习惯了围绕着业务开展，工作时间被迫碎片化。以为做了很多东西，实际上并没有做出什么成就。</li>
<li>回头看了上面写的东西，有点想删除的冲动。今天公司举办运动会，一开始我是拒绝的。实际上我差点拒绝了。虽然最后还是去了，还参加了拔河比赛。亚军也挺不错的啦。fate/zero里面征服者大帝曾经说过，一个人的不该为了别人的梦想而努力，而应该寻找这一群有相同梦想的人，然后去完成这个梦想。这是很多人渴望有团队活动的原因。</li>
<li>困了，睡觉吧~</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 转折 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oneproxy]]></title>
      <url>/2017/09/21/oneproxy/</url>
      <content type="html"><![CDATA[<p>前段时间调研了一下oneproxy，google收录的资料比较少，基本都是看得官方的博客文章．<br><a href="http://www.onexsoft.com" target="_blank" rel="noopener">oneproxy</a>，出生于阿里系的人员之手，主要的目的是为了解决数据库变迁所带来的问题．</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>负载均衡 + 分库分表 + 大数据 + SQL监控 + 安全审计</p>
<p>说说我想了解的几个方面吧～</p>
<h2 id="SQL监控"><a href="#SQL监控" class="headerlink" title="SQL监控"></a>SQL监控</h2><p>在解决安全方面，oneproxy有几个层次验证拦截．<br>  1．网络隔离，oneproxy可以限制其他机器对端口的访问</p>
<ol>
<li>登录验证，就是数据库用户密码验证</li>
<li>访问限制，就是MySQL等常见的权限验证</li>
<li>应用验证，类似于Google的动态口令，发送一个特殊的SQL语句来对数据库的访问进行解锁</li>
<li>SQL白名单，需要搜集目前可以执行的SQL模板形成白名单，可以有效的防止SQL注入．<br>除此之外，还有基于客户端IP地址的流量控制，而且还有很多监控相关的数据可以查看，具体就不罗列了．</li>
</ol>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>由于oneproxy实际上是一个代理，所以实际上，后端到底是访问哪个数据库，对于用户本身是未知的．<br>如同haproxy或者codis这一类应用一样，它可以减少实际数据库的链接数，减少tcp链接频繁创建．<br>所以，oneproxy不能用<code>use</code>,存储过程，<code>prepare</code>这一类的操作．<br>更大的好处是，多实例数据库可以防止单点故障．</p>
<p>我看oneproxy有相关的配置，可以让它优先去访问master还是slave数据库，但是这个操作是oneproxy实例级别的，大部分业务场景都是读写分离，但是对于部分实时性要求比较高的场景，读写都会在主数据库完成，即使是开了SemiSync也是不够的，是否可以做到指定呢？还是说，这时候实际上，开发不应该基于MySQL等来完成实时的一致性校验．<br>目前的策略是 read_slave, read_balance, big_slave, big_balance．完整的介绍<a href="http://www.onexsoft.com/zh/oneproxy-read-traffic-scaleout.html" target="_blank" rel="noopener">传送门</a></p>
<h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>这是很多proxy都需要支持的一个特性，mysql实际上也是支持单实例的分区的，不过这对SQL解析和merge数据方存在一定的挑战．这个特性的基础上，大表可以根据需要分散到各个不同的数据库实例之中，对查询的性能瓶颈有很大的突破．不过存在的问题，比如分布式事务的支持，我看oneproxy还是没有解决的，毕竟老大难．<br>这里有个很不错的功能，是在分库分表的情况下，可以生成对应的主键．<a href="http://www.onexsoft.com/zh/oneproxy-sharding-key-sequence.html" target="_blank" rel="noopener">创送们</a> 从前自己实现的分表里面，主键是通过redis来维护的自增值．用oneproxy的话，就方便多了～</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> oneproxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[naxsi]]></title>
      <url>/2017/09/16/naxsi/</url>
      <content type="html"><![CDATA[<h2 id="Naxsi"><a href="#Naxsi" class="headerlink" title="Naxsi"></a><a href="https://github.com/nbs-system/naxsi" target="_blank" rel="noopener">Naxsi</a></h2><p>github上，NAXSI自我介绍是Nginx Anti XSS &amp; SQL Injection。顾名思义，他是nginx一个用来防止XSS和SQL注入的Nginx插件。</p>
<p>原来就是将请求的各个参数，通过Naxsi预先设置的规则判断，通过得分，来决定是否拦截。</p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>安装很简单，ubuntu上面只需要<code>apt-get nginx-naxsi</code>就可以啦~其他系统则可以选择官方介绍的，将Naxsi编译进nginx中，wiki上注明需要优先编译Naxsi。</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol>
<li>在http{}层，加入<code>include naxsi_core.rules</code>。naxsi_core.rules是naxsi自带的核心规则。可以防止一般的SQL注入和XSS。</li>
<li>在server{}层，可以动态的设定一些参数。具体见<a href="https://github.com/nbs-system/naxsi/wiki/runtime-modifiers" target="_blank" rel="noopener">传送门</a>。</li>
<li>在location{}层，可以设置naxsi的开关(是否执行，学习模式[–&gt;观察者模式])，白名单，拦截规则，还有拦截后的重定向。依旧是一个[传送门] (<a href="https://github.com/nbs-system/naxsi/wiki/naxsi-setup)。" target="_blank" rel="noopener">https://github.com/nbs-system/naxsi/wiki/naxsi-setup)。</a></li>
</ol>
<h3 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h3><p>LearningMode是学习模式，开启后，naxsi会在errorLog中打出拦截的请求和拦截的原因，但是并不会真正的拦截请求。因此，使用者可以通过errLog分析得到目前的拦截规则是否适用于服务。</p>
<p>errLog大概长得像这样子</p>
<pre><code>2017/09/15 06:12:33 [error] 18321#0: *291887486 NAXSI_FMT: ip=172.16.1.1&amp;server=a.b.com&amp;uri=/hello&amp;learning=1&amp;vers=0.55.3&amp;total_processed=10086&amp;total_blocked=404&amp;block=1&amp;cscore0=$SQL&amp;score0=8&amp;zone0=ARGS&amp;id0=1000&amp;var_name0=s&amp;zone1=ARGS&amp;id1=1009&amp;var_name1=s, client: 172.16.1.1, server: a.b.com, request: &quot;GET /hello?s=***** HTTP/1.1&quot;, host: &quot;a.b.com&quot;
</code></pre><p>Naxsi认为，请求参数里面s中，有可能存在SQL注入(csore0=$SQL)，并且告诉我们，参与判定的规则是1000(id0=1000)，有问题的参数是s(var_name0=s)，当然出问题的不仅仅是一处时，他将会以平铺的模式，继续追加结果，如上所示。</p>
<p>如果我们认为，这个参数是不存在问题的，可以自己加入白名单。<br>比如如果我们想要将s这个参数排除在检测之外，则可以加入如下规则：</p>
<pre><code>BasicRule wl:0 &quot;mz:$ARGS_VAR:s|$URL:/hello&quot;;
</code></pre><h2 id="Nxapi"><a href="#Nxapi" class="headerlink" title="Nxapi"></a>Nxapi</h2><p>对于大型网站而言，一旦开启了Naxsi，产生的errLog将会极其庞大。Naxsi提供一个方案，来做事件分析，生成相应的白名单。这就是<a href="https://github.com/nbs-system/naxsi/tree/master/nxapi" target="_blank" rel="noopener">nxapi</a>啦。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> naxsi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[踩坑日记之Upstart]]></title>
      <url>/2017/08/11/upstart/</url>
      <content type="html"><![CDATA[<h4 id="Upstart的Expect"><a href="#Upstart的Expect" class="headerlink" title="Upstart的Expect"></a>Upstart的Expect</h4><p>用upstart来管理系统的服务，很常见。但是也有需要注意的地方。比如，配置文件里面的expect。</p>
<p>Expect有两种，”expect fork”表示进程只会fork一次，”expect daemonize”表示进程会fork两次，将自己变成后台进程。</p>
<p>然而，错误的配置文件会让upstart启动某个进程之后，却无法跟踪管理这个进程的PID。结果Upstart会进入奇妙的状态。</p>
<p>没办法，虽然本应该是它的PID，还没找到就不见了~因此，它十分怀念，念念不忘这个PID，以至于再也无法控制这个程序~无法启动，停止，重启这个进程。</p>
<h3 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h3><p>方法其实很简单，如果我们可以启动一个服务，它的PID是Upstart所需要的PID，然后让Upstart跟踪到，然后kill掉这个PID的进程，那么Upstart的行为才可以变为正常。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>有一个ruby的<a href="https://raw.githubusercontent.com/ion1/workaround-upstart-snafu/master/workaround-upstart-snafu" target="_blank" rel="noopener">代码</a>，可以参考下。亲测可用~</p>
]]></content>
      
        <categories>
            
            <category> 踩坑日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> upstart </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[踩坑日记之nginx-limit-req]]></title>
      <url>/2017/08/10/nginx/</url>
      <content type="html"><![CDATA[<p>一般我们都认为nginx -t可以测试出配置文件是否配置正确。<br>其实不然~</p>
<h4 id="limit-req-zone"><a href="#limit-req-zone" class="headerlink" title="limit_req_zone"></a><code>limit_req_zone</code></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit_req_zone  <span class="variable">$binary_remote_addr</span>  <span class="attribute">zone</span>=req_one:10m <span class="attribute">rate</span>=1r/s</span><br></pre></td></tr></table></figure>
<p>这是nginx配置速率限制的插件。具体可以自行查询相关资料。</p>
<h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>当时原本设置的限制条件为$uri，测试的过程中，发现实际上$request_uri才是符合要求的限制条件，因而修改了配置，<code>nginx -t</code>测试顺利通过，<code>nginx -s reload</code>也没有任何报错。但是实际上，nginx worker并没有退出。</p>
<p>一开始还认为是worker承载的请求太多，以至于请求没能处理完毕，导师worker延迟退出。<br>直到多心去看了一眼日志，才发现，limit_req这个模块，在设置<code>limit_req_zone</code>的时候是无法修改限制条件的。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>只能够同时修改zone~~~</p>
]]></content>
      
        <categories>
            
            <category> 踩坑日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pyrobuf的改进]]></title>
      <url>/2017/07/12/pyrobuf%E7%9A%84%E6%94%B9%E8%BF%9B/</url>
      <content type="html"><![CDATA[<h3 id="问题-1-–字符串编码"><a href="#问题-1-–字符串编码" class="headerlink" title="问题(1)–字符串编码"></a>问题(1)–字符串编码</h3><p>protobuf的标准里面，所有的字符串都是标准的UTF-8模式。而python恰恰是一个经常性遇到字符串编码问题的语言。</p>
<p>但是pyrobuf里面，处理字符串的时候，当遇到字符串问题的时候，不会跑出错误，而会直接崩溃。</p>
<h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决(1)"></a>解决(1)</h3><p>源码的模板中，可以选择在字符串decode的判断中，加入try-except，pass掉错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	self._ = unicode(memory[current_offset:current_offset + field_size], <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	self._ = <span class="string">u''</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>当然，这种修改必须修改掉全部的decode判断。也有另外一种方式，就是简单地抛出错误。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdef <span class="keyword">int</span> _protobuf_deserialize(self, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *memory, <span class="keyword">int</span> <span class="built_in">size</span>) except <span class="number">-1</span>:</span><br></pre></td></tr></table></figure>
<p>在cython中<code>except -1</code>,代表着会将抛出的错误转化为python里面的Exception，就可以被上层调用的代码捕捉，不至于直接退出程序。</p>
<h3 id="问题-2-–字段缺少"><a href="#问题-2-–字段缺少" class="headerlink" title="问题(2)–字段缺少"></a>问题(2)–字段缺少</h3><p>通过源码阅读，可以发现实际上如果protobuf里面的字段我并不需要，那么精简proto定义，可以减少解析的字段，因而优化解析的性能。然而，pyrobuf却判断了传入的data的长度，和解析过的长度，然后抛出了错误，</p>
<h3 id="解决-2"><a href="#解决-2" class="headerlink" title="解决(2)"></a>解决(2)</h3><p>因而，需要删除这部分判断。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> buf != <span class="keyword">length</span>:</span><br><span class="line">	raise DecodeError(<span class="string">"Truncated message: got %s expected %s"</span> % (buf, size))</span><br></pre></td></tr></table></figure></p>
<h2 id="另辟溪路"><a href="#另辟溪路" class="headerlink" title="另辟溪路"></a>另辟溪路</h2><p>google的protobuf库里面实际上已经有了protobufc，解析的效率实际上与pyrobuf差不多。如果单纯只是解析的话，可以直接使用google的原生库。当然，pyrobuf还提供了输出到json,dict的函数~~</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> pyrobuf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ganglia-buffer]]></title>
      <url>/2017/07/10/ganglia-buffer/</url>
      <content type="html"><![CDATA[<p>最近给服务器的redis-cluster加ganglia监控，但是配置加载之后，ganglia却失控了．面板上面ganglia部分数据无法显示．debug的时候，发现ganglia-monitor可以正常的收集数据，那么问题出在哪里呢？</p>
<h2 id="etc-ganglia-gmond-conf"><a href="#etc-ganglia-gmond-conf" class="headerlink" title="/etc/ganglia/gmond.conf"></a>/etc/ganglia/gmond.conf</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">udp_recv_channel &#123;</span><br><span class="line">   <span class="built_in"> port </span>= 8649</span><br><span class="line">    bind = ***.***.***.***</span><br><span class="line">    retry_bind = <span class="literal">true</span></span><br><span class="line">    # Size of the UDP buffer. <span class="keyword">If</span> you are handling lots of metrics you really # should bump it up <span class="keyword">to</span> e.g. 10MB <span class="keyword">or</span> even higher.</span><br><span class="line">    buffer = 10485760</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gmond默认的配置文件里面并没有写上这行配置，所以很多人都会忽略掉．</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>修改buffer大小就可以啦．</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
      
        <categories>
            
            <category> 踩坑日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> ganglia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年不懂的spark(4)]]></title>
      <url>/2017/07/01/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark-4/</url>
      <content type="html"><![CDATA[<h2 id="spark-files"><a href="#spark-files" class="headerlink" title="spark-files"></a>spark-files</h2><p>spark-default.xml<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark<span class="selector-class">.files</span><span class="selector-class">.maxPartitionBytes</span> <span class="number">67108864</span></span><br><span class="line">spark<span class="selector-class">.sql</span><span class="selector-class">.files</span><span class="selector-class">.maxPartitionBytes</span> <span class="number">33554432</span></span><br></pre></td></tr></table></figure></p>
<p>spark在读取大文件的时候会自动的分区，这时候分区的标准就是上面这两个参数．<br>因此可以根据这两个参数调配任务的task，防止内存爆了．</p>
<h2 id="spark-dynamicAllocation"><a href="#spark-dynamicAllocation" class="headerlink" title="spark-dynamicAllocation"></a>spark-dynamicAllocation</h2><p>spark-default.xml<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark<span class="selector-class">.dynamicAllocation</span><span class="selector-class">.enabled</span>  true</span><br><span class="line">spark<span class="selector-class">.dynamicAllocation</span><span class="selector-class">.executorIdleTimeout</span> <span class="number">10s</span></span><br></pre></td></tr></table></figure></p>
<p>dynamicAllocation 是spark自动调配executor的方式．可以尽可能的使用spark集群，<br>调节executorIdleTimeout，可以在任务使用完executor之后，尽快地释放executor，使得其它任务可以尽快的使用．</p>
<h2 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h2><p>未完待续</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>偶尔会遇到timeout的情况，这时候一般都是内存不足，一直不是很明白spark到底怎么使用内存的．也许不是java党的缘故，有点难以着手．有空再好好剖析．</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
      
        <categories>
            
            <category> spark </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年不懂的spark(3)]]></title>
      <url>/2017/06/03/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark-3/</url>
      <content type="html"><![CDATA[<p>aws的emr起来之后，默认的磁盘很小，所以长期跑任务的时候，经常会因为磁盘不够，导致节点失败。而且，这种情况下的emr，是不会自动修复的。</p>
<h2 id="spark-history"><a href="#spark-history" class="headerlink" title="spark-history"></a>spark-history</h2><p>spark-default.xml<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spark<span class="selector-class">.history</span><span class="selector-class">.fs</span><span class="selector-class">.cleaner</span><span class="selector-class">.enabled</span> true</span><br><span class="line">spark<span class="selector-class">.history</span><span class="selector-class">.fs</span><span class="selector-class">.cleaner</span><span class="selector-class">.interval</span> <span class="number">1</span>m</span><br><span class="line">spark<span class="selector-class">.history</span><span class="selector-class">.fs</span><span class="selector-class">.cleaner</span><span class="selector-class">.maxAge</span> <span class="number">1</span>h</span><br></pre></td></tr></table></figure></p>
<p>spark-history里面保存着spark的application的log，因此如果不需要的话，可以把清理的时间变短一下。</p>
<h2 id="spark-yarn"><a href="#spark-yarn" class="headerlink" title="spark-yarn"></a>spark-yarn</h2><p>yarn-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.localizer.cache.target-size-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>5120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.localizer.cache.cleanup.interval-ms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>spark执行任务的时候，会将自身需要的jar放到hadoop上，导致hadoop的磁盘会缓存下一堆的目录，也是可以定期清理的。</p>
<h2 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h2><p>未完待续</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
      
        <categories>
            
            <category> spark </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[touch]]></title>
      <url>/2017/05/26/touch/</url>
      <content type="html"><![CDATA[<h3 id="Touch"><a href="#Touch" class="headerlink" title="Touch"></a>Touch</h3><p>touch这个命令,对于一个技术而言,应该是十分熟悉的.<br>像uwsgi这种就可以使用监听一个文件的方式来触发服务更新的部署方式,我们这时候就会用到<code>touch reload</code>的命令来完成.<br>更重要的是,我习惯性地打<code>ls -al</code>的命令来查看文件的最后修改时间,来查看是否有小朋友乱动了线上的文件.</p>
<p>直到有一天……..<br>有同事告诉我,touch有个神奇的功能.<br>于是乎,我<code>touch --help</code>下</p>
<pre><code>-a            只更改访问时间
-c, --no-create 不创建任何文件
-d, --date=字符串 使用指定字符串表示时间而非当前时间
-f          (忽略)
-h, --no-dereference      会影响符号链接本身，而非符号链接所指示的目的地
    (当系统支持更改符号链接的所有者时，此选项才有用)
-m            只更改修改时间
-r, --reference=FILE   use this file&apos;s times instead of current time
-t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of current time
--time=WORD        change the specified time:
    WORD is access, atime, or use: equivalent to -a
    WORD is modify or mtime: equivalent to -m
--help      显示此帮助信息并退出
--version     显示版本信息并退出
</code></pre><h3 id="惊"><a href="#惊" class="headerlink" title="惊!"></a>惊!</h3><p>touch是可以指定最后修改时间的!也就是说,<code>touch --date=&quot;2017-05-25 12:00:00&quot; reload&quot;</code>,这个命令可以将reload的最后修改时间改回去!<br>人与人之间最基本的信任呢.</p>
<h3 id="Stat"><a href="#Stat" class="headerlink" title="Stat"></a>Stat</h3><p>放心,<code>stat reload</code>这个命令还是可以看出问题来的.</p>
<pre><code>文件：&quot;reload&quot;
大小：0             块：0          IO 块：4096   普通空文件
    设备：808h/2056d    Inode：25039211    硬链接：1
权限：(0664/-rw-rw-r--)  Uid：( 1000/ catchen)   Gid：( 1000/ catchen)
    最近访问：2017-05-25 12:00:00.000000000 +0800
    最近更改：2017-05-25 12:00:00.000000000 +0800
    最近改动：2017-05-26 15:38:02.693909554 +0800
    创建时间：-
</code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这感觉,就像ls无法告诉我真实大小一样,现在连最后修改时间都不行了.</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dmesg]]></title>
      <url>/2017/04/06/dmesg/</url>
      <content type="html"><![CDATA[<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>dmesg显示内核环缓冲区内容，一般我都是来查看比如oom之类的问题。之前我同事问我时间怎么算。我也是一直没记录这个公式，只放在印象笔记里面，现在就写在这里吧。</p>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>dmesg的时间确实难看懂，可以通过以下的命令转化<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">date</span> -d <span class="string">"1970-01-01 UTC `echo "</span>$(<span class="keyword">date</span> +%s)-$(cat /<span class="keyword">proc</span>/uptime|cut -f <span class="number">1</span> -d<span class="string">' '</span>)+dmesg的时间戳<span class="string">"|bc ` seconds"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pyrobuf]]></title>
      <url>/2017/04/02/pyrobuf/</url>
      <content type="html"><![CDATA[<h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><p>Protocol Buffers 是一种轻便高效的结构化数据存储格式。我也是重度使用者。最近需要大量的实时处理Tb级别的数据，因此找到了protobuf的代替库 —- <a href="https://github.com/appnexus/pyrobuf" target="_blank" rel="noopener">pyrobuf</a></p>
<h2 id="pyrobuf"><a href="#pyrobuf" class="headerlink" title="pyrobuf"></a>pyrobuf</h2><p>pyrobuf是一个使用cython的pb库。一开始从他的github中，我确实看到了挺好的优化效果。</p>
<p>但是pyrobuf这个库的限制还是蛮大的，主要是对于proto文件。比如</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 不能在message里面定义数据结构，不然转化的过程中，会找不到定义；</span><br><span class="line"><span class="number">2</span>. proto定义的过程中，message的定义不能加上分号为结尾；</span><br><span class="line"><span class="number">3</span>. <span class="class"><span class="keyword">enum</span>定义的类型，生成之后暂时还找不到映射会名称的方式；</span></span><br></pre></td></tr></table></figure>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span>pyrobuf</span><br><span class="line">pyrobuf --out-<span class="keyword">dir </span>out --<span class="keyword">build-dir </span><span class="keyword">build </span>--<span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>这里面，out目录存放着生成的cython的代码，build目录存放这边一好的so文件，而install的参数添加之后，则pyrobuf会将编译好的so文件复制到python的library目录，这就可以直接使用。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>上线观察了下数据，原本20分钟转化的数据，只用了4分钟就转化完毕。不过数据内容还没有核对，晚点再查看吧~</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> pyrobuf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年不懂的spark(2)]]></title>
      <url>/2017/03/30/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark-2/</url>
      <content type="html"><![CDATA[<h2 id="partitionBy-amp-amp-s3"><a href="#partitionBy-amp-amp-s3" class="headerlink" title="partitionBy &amp;&amp; s3"></a>partitionBy &amp;&amp; s3</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df<span class="selector-class">.write</span><span class="selector-class">.partitionBy</span>(<span class="string">'date'</span>, <span class="string">'index1'</span>, <span class="string">'index2'</span>, <span class="string">'index3'</span>).parquet(<span class="string">'some/path/'</span>)</span><br></pre></td></tr></table></figure>
<p>我用spark程序在输出parquet的过程中，通过partitionBy的column来自动生成文件夹。由于spark在写入的过程中，会扫描<code>some/path/</code>的所有目录。然后由于我的目录中有以<code>date</code>这个时间维度的标准的，这造成随着时间的推移，文件夹会越来越多，扫描的数据也就越来越慢。然后由于我使用的存储是s3，而s3不是一个真正意义上的文件系统，因而扫描文件夹的过程是一个调用api的过程，就更加慢了~</p>
<p>解决方式：可以写入hdfs等文件系统，再通过s3-dist-cp这个工具同步到s3上。</p>
<h2 id="so文件"><a href="#so文件" class="headerlink" title="so文件"></a>so文件</h2><p>spark 可以通过sparkContext.addFiles这个api，把so文件添加到任务实例上。</p>
<h2 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h2><p>未完待续</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
      
        <categories>
            
            <category> spark </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年不懂的spark]]></title>
      <url>/2017/03/19/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%8D%E6%87%82%E7%9A%84spark/</url>
      <content type="html"><![CDATA[<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>spark是一个好东西。流式处理数据，扩容方便，较大程度上的利用机器，学习还是很有必要的。这几个星期的使用，也踩了不少坑。世界上的很多东西，不是难，而是不知道。</p>
<h2 id="jsc"><a href="#jsc" class="headerlink" title="_jsc"></a>_jsc</h2><p>我是python的使用者，近来发现需要在启动spark的时候设置参数，但是在文档查找的过程中，只发现只有java的api文档里面有相关的参数设置，而python没有。囧~</p>
<p>最后发现python的<code>SparkContext</code>里，有一个参数是<code>_jsc</code>,其代表的恰恰就是java里面的 <code>SparkContext</code>。运行时可以通过这个对象，来实现参数的设置。</p>
<h2 id="parquet-enable-summary-metadata"><a href="#parquet-enable-summary-metadata" class="headerlink" title="parquet.enable.summary-metadata"></a>parquet.enable.summary-metadata</h2><p>上面提到的参数设置，其实就是这个参数了。由于我所使用的spark的版本是1.6.1，因此这个参数默认的值是true，2.0以后默认为false。详细可见 <a href="https://issues.apache.org/jira/browse/SPARK-15719" target="_blank" rel="noopener">issue</a></p>
<p>大概意思如下，spark在生成parquet文件的过程中，最后会扫描文件夹下的所有文件，并将文件的大致的详细汇总到文件夹目录的metadata文件，完成这个过程之后，在下次直接匹配这个文件夹的时候，spark会读取metadata，加快扫描的速度。</p>
<p>问题是生成这个metadata的文件是需要扫描所有文件的！而我生成paruqet的时候，是以追加的形式加入，频率还是蛮高的情况下，这就意味着我的spark程序会花费大量的时间在汇总这部分数据。并且汇总数据的过程是不会分布到多台机器上运行的。这就大大的降低了集群的利用率，其实也毫无必要。</p>
<p>因此spark生成parquet的过程中，可以选择关闭这个特性~</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sparkContext._jsc<span class="selector-class">.hadoopConfiguration</span><span class="selector-class">.set</span>(<span class="string">'parquet.enable.summary-metadata'</span>, <span class="string">'false'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="partitionBy"><a href="#partitionBy" class="headerlink" title="partitionBy"></a>partitionBy</h2><p>一开始我一直纠结了很多问题，output的分类就是其中一个。而<code>partitonBy</code>完美地解决了我的需求。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df<span class="selector-class">.write</span><span class="selector-class">.partitionBy</span>(<span class="string">'index1'</span>, <span class="string">'index2'</span>, <span class="string">'index3'</span>).parquet(<span class="string">'some/path/'</span>)</span><br></pre></td></tr></table></figure>
<p>以上的代码中，<code>df</code>为一个dataFrame的数据集。</p>
<p>这段代码可以根据index1, index2, index3这几个columns来分类，将数据自动分为如下的目录结构保存.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">some/path/i<span class="symbol">ndex1</span>=&#123;i<span class="symbol">ndex1</span>&#125;/i<span class="symbol">ndex2</span>=&#123;i<span class="symbol">ndex2</span>&#125;/i<span class="symbol">ndex3</span>=&#123;i<span class="symbol">ndex3</span>&#125;/part-****.parquet</span><br></pre></td></tr></table></figure>
<p>之前还傻乎乎地groupBy数据，然后用了collect这个算子，因而需要读取所有文件，就有内存问题等存在。</p>
<h2 id="binaryFiles"><a href="#binaryFiles" class="headerlink" title="binaryFiles"></a>binaryFiles</h2><p>这个不算坑，只是自己没有注意到而已。</p>
<p>之前都是使用<code>textFile</code>的格式读取文本文件，这个过程中，没有指定<code>minPartition</code>，而<code>minPartition</code>的值也基本默认为文本文件的个数。但是<code>binaryFiles</code>不是。程序在默认读取大量二进制文件之后，并没有选择分开，而是<code>minPartition</code>为1，因此这里需要手动指定。</p>
<h2 id="parquet-amp-amp-sparkSQL"><a href="#parquet-amp-amp-sparkSQL" class="headerlink" title="parquet &amp;&amp; sparkSQL"></a>parquet &amp;&amp; sparkSQL</h2><p>sparkSQL太杀手级了~</p>
<p>parquet是列存储数据模式，可以大大的减少存储的文件大小，减少扫描过程中的大小。效率惊人~</p>
<p>sparkSQL在读取文件夹目录下所有文件的过程中，存在一个特定<code>partition auto-discovery</code>的特性。在spark的文档中有详细的记载。大概如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = sqlContext<span class="selector-class">.read</span><span class="selector-class">.parquet</span>(/some/path)</span><br></pre></td></tr></table></figure>
<p>如果<code>/some/path</code>下有目录如下<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/some/path</span></span><br><span class="line">	-<span class="ruby">- <span class="regexp">/index1=h1/index</span>2=f1/</span></span><br><span class="line"><span class="ruby">	-- <span class="regexp">/index1=h1/index</span>2=f2/</span></span><br><span class="line"><span class="ruby">	-- <span class="regexp">/index1=h2/index</span>2=f1/</span></span><br><span class="line"><span class="ruby">	-- <span class="regexp">/index1=h2/index</span>2=f2/</span></span><br></pre></td></tr></table></figure></p>
<p>则最后生成的sparkSQL的table里面，将会自动的加入index1, index2的column，当你使用index1来查询时，即</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">df</span><span class="selector-class">.registerTempTable</span>(<span class="string">"log"</span>)</span><br><span class="line"><span class="selector-tag">sqlContext</span><span class="selector-class">.sql</span>(<span class="string">"SELECT * FROM log WHERE index1 = h1"</span>)</span><br></pre></td></tr></table></figure>
<p>这个过程中，会自动的只扫描index1=h1的目录下的文件。<br>缺点是我喜欢使用通配符的形式来读取，结果通配的列就不存在了~<br>sad~</p>
<h2 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h2><p>未完待续~</p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
      
        <categories>
            
            <category> spark </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[向2016致敬]]></title>
      <url>/2017/01/25/%E5%90%912016%E8%87%B4%E6%95%AC/</url>
      <content type="html"><![CDATA[<p>  2016年的我，你好，我是2017年的你。拖了很久，我才开始写这一封信给你，来告诉你，这一年的故事。先给你的2016年打一个分吧，87分，满分100分。</p>
<p>  2016年，在历经3年的努力下，你终于将自己多年的积蓄给父母买了一个房子，过年回家的时候，看到父母忙忙碌碌地整理房子，心情十分复杂。十几年来，当第一次懂事的时候，你就知道父母一直希望拥有这么一个属于自己的房子，只是一直没有能力。感谢2016年的你，在外包和工作等压力下，完成了这个心愿，过去3年，至少这件心愿，你完成了。不过，2016年的你，已经把所有的积蓄都花完了，苦了2017年的我了。你还记得你曾经答应嘻嘻给她在广州一个家么？我知道你一直都还记得，只是说，你已经尽力了。算了，那就让2017年的我好好努力吧。</p>
<p>  说到赚钱这一方面，2016年的你，很感谢你守住了另外一份承诺。没有在你身边的大环境的情况下，你做类似夺宝之类的产品。虽然2016年的你也没有推出个人作品，不管是CleverKid还是Say，就等2017年的我来完成吧。我知道努力坚持自己是有多难，感谢你坚持下来了。2017年的我也会好好坚持本心的。</p>
<p>  你是一个喜欢数学的理科生，但是这一年里面的工作其实大部分都和数学的相关性不大，其实你也没能够发挥出自己的特长。这也和你现在所在的工作岗位有关系吧。不过没关系，自己好好学习吧。现在大数据和人工智能这两方面都是比较热门的，也是十分适合你的工作，希望你可以好好珍惜。</p>
<p>  2017年的我，比起你而言，确实是长大了。我知道，也许选择比努力更加重要，你创造的多少价值，才能得到多少报酬。因此，希望我们可以创造自己的价值。想想2016年的年初，你还在抱怨年终太少之类的话，现在想想自己还是太幼稚了，你啊，确实是没有创造足够的价值，对吧？没事，我们这种人就是天生的骄傲型，相信天赋，过去努力积累的实例和未来的自己。纵使我们徘徊在现实和梦想之间，我们也会去看看梦想的世界，如果就这么屈服于现实，怎么知道世界的美好呢？</p>
<p>  不过，2016年的时候，你还是有几点是做得不够好的。首先，你发脾气了，虽然发脾气不是一件什么大不了的事情，但是事实上，在某些时候你不应该发脾气，比如对待嘻嘻的时候。人嘛，往往会宽容那些不熟的人，却无法容忍自己人的错误。这点希望以后可以改改。第二点不好的地方，话说，你学习swift做ios也好，机器学习也罢，要学习深一些，你现在两门的基础都没有打好，2016年反而觉得有点浪费了。后端没深入学习，反而学了两个兴趣方面，现在3个方面都没有好的发展。这样子不是很好。2017年的时候要好好选择一种，然后制定计划，好好学习。第三点，2016年，你从游戏转到了广告，恭喜你，先走出了一个温床，进入了另外一个温床~~告诉你哦，你还是得好好努力的。</p>
<p>  2016年的我，我知道你丢失了很多美好，我会在2017年，帮你找回来的。我相信你的骄傲，会有一天可以看到你的美好笑容和幸福。</p>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch系列笔记(六)  索引]]></title>
      <url>/2016/08/21/es6/</url>
      <content type="html"><![CDATA[<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"settings"</span> &#123;&#125;</span><br><span class="line">    <span class="string">"mappings"</span>: &#123;</span><br><span class="line">        <span class="string">"type_one"</span>:&#123;&#125;,</span><br><span class="line">        <span class="string">"type_two"</span>:&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> /my_index</span><br></pre></td></tr></table></figure>
<h4 id="settings"><a href="#settings" class="headerlink" title="settings:"></a>settings:</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number<span class="number">_</span><span class="keyword">of</span><span class="number">_</span>shards    主索引的个数</span><br><span class="line">number<span class="number">_</span><span class="keyword">of</span><span class="number">_</span>replicas 复制分片的个数</span><br></pre></td></tr></table></figure>
<p>分析器,这个很重要，合理的使用分析器，可以让你的es拥有合理的性能</p>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch系列笔记(五) 结构化查询]]></title>
      <url>/2016/08/12/es5/</url>
      <content type="html"><![CDATA[<h4 id="结构化查询Query-DSL"><a href="#结构化查询Query-DSL" class="headerlink" title="结构化查询Query DSL"></a>结构化查询Query DSL</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"query"</span>: &#123;</span><br><span class="line"><span class="symbol">            QUERY_NAME:</span> &#123;</span><br><span class="line"><span class="symbol">                FIELD_NAME:</span> &#123;</span><br><span class="line"><span class="symbol">                    ARGUMENT:</span> VALUE,</span><br><span class="line"><span class="symbol">                    ARGUMENT:</span> VALUE,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="过滤查询Filter-DSL"><a href="#过滤查询Filter-DSL" class="headerlink" title="过滤查询Filter DSL"></a>过滤查询Filter DSL</h4><h4 id="term-过滤"><a href="#term-过滤" class="headerlink" title="term 过滤"></a>term 过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">        <span class="string">"&#123;field&#125;"</span>: &#123;value&#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="terms-过滤"><a href="#terms-过滤" class="headerlink" title="terms 过滤"></a>terms 过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"&#123;field&#125;"</span>: [ &#123;value1&#125;, &#123;value2&#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="range过滤"><a href="#range过滤" class="headerlink" title="range过滤"></a>range过滤</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;</span><br><span class="line">        <span class="string">"&#123;field&#125;"</span>: &#123;</span><br><span class="line">            <span class="string">"gte"</span>: <span class="number">20</span>, //<span class="keyword">gt</span> <span class="keyword">gte</span>, <span class="keyword">lt</span> <span class="keyword">lte</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="exits-missing过滤"><a href="#exits-missing过滤" class="headerlink" title="exits, missing过滤"></a>exits, missing过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"exists"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"&#123;field&#125;"</span>,//存在这个类型</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">        <span class="string">"must"</span>: &#123;&#125;,//必须符合</span><br><span class="line">        <span class="string">"must_not"</span>: &#123;&#125;,//必须不符合</span><br><span class="line">        <span class="string">"should"</span>: &#123;&#125;,//必须符合其中一个条件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h4><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><h4 id="multi-match"><a href="#multi-match" class="headerlink" title="multi_match"></a>multi_match</h4><h4 id="查询比过滤多了相关性计算"><a href="#查询比过滤多了相关性计算" class="headerlink" title="查询比过滤多了相关性计算"></a>查询比过滤多了相关性计算</h4><h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   	<span class="attr">"filtered"</span>: &#123;</span><br><span class="line">       	<span class="attr">"query"</span>:  &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"email"</span>: <span class="string">"business opportunity"</span> &#125;&#125;,</span><br><span class="line">       	<span class="attr">"filter"</span>: &#123; <span class="attr">"term"</span>:  &#123; <span class="attr">"folder"</span>: <span class="string">"inbox"</span> &#125;&#125;</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="验证查询，解释错误"><a href="#验证查询，解释错误" class="headerlink" title="验证查询，解释错误"></a>验证查询，解释错误</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="regexp">/gb/</span>tweet<span class="regexp">/_validate/</span>query?explain</span><br><span class="line">   	&#123;</span><br><span class="line">       	<span class="string">"query"</span>: &#123;</span><br><span class="line">           	*********</span><br><span class="line">       	&#125;</span><br><span class="line">   	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="排序，在query之后"><a href="#排序，在query之后" class="headerlink" title="排序，在query之后"></a>排序，在query之后</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">   	<span class="string">"query"</span>: &#123;</span><br><span class="line">   	&#125;,</span><br><span class="line">   	<span class="string">"sort"</span>: &#123;</span><br><span class="line">   		<span class="string">"&#123;field&#125;"</span>:&#123;</span><br><span class="line">   			<span class="string">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">   		&#125;,</span><br><span class="line">   		<span class="string">"&#123;field&#125;"</span>:&#123;</span><br><span class="line">   			<span class="string">"order"</span>: <span class="string">"asc"</span>,</span><br><span class="line">   			<span class="string">"mode"</span>: <span class="string">"min"</span> //field为多个值时</span><br><span class="line">       	&#125;</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch系列笔记(四) 搜索]]></title>
      <url>/2016/08/09/es4/</url>
      <content type="html"><![CDATA[<h4 id="路由文档到分片"><a href="#路由文档到分片" class="headerlink" title="路由文档到分片"></a>路由文档到分片</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard = hash<span class="comment">(routing)</span> <span class="meta">%</span> <span class="symbol">number_of_primary_shards</span></span><br></pre></td></tr></table></figure>
<h4 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h4><pre><code>请求是否需要等待复制分区的成功响应，默认为sync等待，async异步不等待。 
</code></pre><h4 id="consistency"><a href="#consistency" class="headerlink" title="consistency"></a>consistency</h4><pre><code>文档在写入的时候，需要规定一定的分区更新成功之后，才会返回客户端成功，如果节点不够，则不能删除或者索引任何文件

int((primary + number_of_replicas) / 2) + 1
</code></pre><h4 id="空搜索"><a href="#空搜索" class="headerlink" title="空搜索"></a>空搜索</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /<span class="variable">_search</span></span><br><span class="line">    hits:</span><br><span class="line">        total 总文档数</span><br><span class="line">        hits 匹配到的数量</span><br><span class="line">        max_score 最大相关性</span><br><span class="line">    took：请求时间</span><br><span class="line">    <span class="variable">_shards</span>: 用到的分片大小和类型</span><br><span class="line">GET /<span class="variable">_search</span>?<span class="built_in">size</span>=&#123;<span class="built_in">size</span>&#125;&amp;<span class="keyword">from</span>=&#123;<span class="keyword">from</span>&#125;</span><br><span class="line">    从<span class="keyword">from</span>开始最多<span class="built_in">size</span>个内容返回</span><br></pre></td></tr></table></figure>
<h4 id="简易搜索"><a href="#简易搜索" class="headerlink" title="简易搜索"></a>简易搜索</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /_all/&#123;type&#125;/_search?q=&#123;field&#125;:&#123;key&#125;</span><br><span class="line">GET /_all/&#123;type&#125;/_search?q=`urlencode(+&#123;field&#125;:&#123;key&#125;-&#123;field&#125;:&#123;key&#125;)` +条件满足 -条件不满足</span><br><span class="line">GET /_all/&#123;type&#125;/_search?q=&#123;value&#125; 查询包含<span class="keyword">value</span>的文档</span><br></pre></td></tr></table></figure>
<h4 id="新建索引，设置分析器"><a href="#新建索引，设置分析器" class="headerlink" title="新建索引，设置分析器"></a>新建索引，设置分析器</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;index&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"mappings"</span>: &#123;</span><br><span class="line">        <span class="string">"&#123;type&#125;"</span>: &#123;</span><br><span class="line">            <span class="string">"properties"</span>: &#123;</span><br><span class="line">                <span class="string">"field"</span>: &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">""</span>, //string, date, long, object(嵌套)</span><br><span class="line">                    <span class="string">"index"</span>: <span class="string">""</span>, // analyzed, not_analyzed, no</span><br><span class="line">                    <span class="string">"analyzer"</span>: <span class="string">""</span>, // english, space</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">GET /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/_analyze?field=</span><span class="template-variable">&#123;field&#125;</span><span class="xml">&amp;text=</span><span class="template-variable">&#123;value&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch系列笔记(三) 基本API]]></title>
      <url>/2016/08/04/es3/</url>
      <content type="html"><![CDATA[<h4 id="添加文档-自定义ID"><a href="#添加文档-自定义ID" class="headerlink" title="添加文档,自定义ID"></a>添加文档,自定义ID</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"field"</span>: <span class="string">"value"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加文档，这时候的ID是ES自动生成，为22位的UUIDS"><a href="#添加文档，这时候的ID是ES自动生成，为22位的UUIDS" class="headerlink" title="添加文档，这时候的ID是ES自动生成，为22位的UUIDS"></a>添加文档，这时候的ID是ES自动生成，为22位的UUIDS</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /&#123;index&#125;/&#123;type&#125;/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"field"</span>: <span class="string">"value"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获得文档"><a href="#获得文档" class="headerlink" title="获得文档"></a>获得文档</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;?pretty</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_index"</span> :   <span class="string">"&#123;index&#125;"</span>,</span><br><span class="line">    <span class="string">"_type"</span> :    <span class="string">"&#123;type&#125;"</span>,</span><br><span class="line">    <span class="string">"_id"</span> :      <span class="string">"&#123;id&#125;"</span>,</span><br><span class="line">    <span class="string">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"found"</span> :    true, //是否找到，<span class="number">404</span>同步返回</span><br><span class="line">    <span class="string">"_source"</span> :  &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"value"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获得文档的特定属性"><a href="#获得文档的特定属性" class="headerlink" title="获得文档的特定属性"></a>获得文档的特定属性</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;/&#123;key&#125;?pretty</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"&#123;key&#125;"</span>: <span class="string">"value"</span></span><br><span class="line">&#125;</span><br><span class="line">key 为上面json的值</span><br></pre></td></tr></table></figure>
<h4 id="获得文档的特定值"><a href="#获得文档的特定值" class="headerlink" title="获得文档的特定值"></a>获得文档的特定值</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;?pretty&amp;_source=&#123;field1&#125;,&#123;field2&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_index"</span> :   <span class="string">"&#123;index&#125;"</span>,</span><br><span class="line">    <span class="string">"_type"</span> :    <span class="string">"&#123;type&#125;"</span>,</span><br><span class="line">    <span class="string">"_id"</span> :      <span class="string">"&#123;id&#125;"</span>,</span><br><span class="line">    <span class="string">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"found"</span> :    true, //是否找到，<span class="number">404</span>同步返回</span><br><span class="line">    <span class="string">"_source"</span> :  &#123;</span><br><span class="line">        <span class="string">"field1"</span>: <span class="string">"value"</span>,</span><br><span class="line">        <span class="string">"field2"</span>: <span class="string">"value"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="检查文档是否存在"><a href="#检查文档是否存在" class="headerlink" title="检查文档是否存在"></a>检查文档是否存在</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">HEAD /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h4 id="更新文档的时候，写法和插入时相同"><a href="#更新文档的时候，写法和插入时相同" class="headerlink" title="更新文档的时候，写法和插入时相同"></a>更新文档的时候，写法和插入时相同</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_<span class="keyword">version</span>会递增</span><br></pre></td></tr></table></figure>
<h4 id="创建文档，成功创建的时候，返回201，失败返回409"><a href="#创建文档，成功创建的时候，返回201，失败返回409" class="headerlink" title="创建文档，成功创建的时候，返回201，失败返回409"></a>创建文档，成功创建的时候，返回201，失败返回409</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">?op_type=create</span></span><br><span class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">/_create</span></span><br></pre></td></tr></table></figure>
<h4 id="删除文档，失败返回404"><a href="#删除文档，失败返回404" class="headerlink" title="删除文档，失败返回404"></a>删除文档，失败返回404</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> /&#123;<span class="keyword">index</span>&#125;/&#123;<span class="keyword">type</span>&#125;/&#123;<span class="keyword">id</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="更新某个特定版本的文档，用于控制并发错误，version-type设置了用此时的version来设置文档的version"><a href="#更新某个特定版本的文档，用于控制并发错误，version-type设置了用此时的version来设置文档的version" class="headerlink" title="更新某个特定版本的文档，用于控制并发错误，version_type设置了用此时的version来设置文档的version"></a>更新某个特定版本的文档，用于控制并发错误，version_type设置了用此时的version来设置文档的version</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">?version=</span><span class="template-variable">&#123;version&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">PUT /</span><span class="template-variable">&#123;index&#125;</span><span class="xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="xml">/</span><span class="template-variable">&#123;id&#125;</span><span class="xml">?version=</span><span class="template-variable">&#123;version&#125;</span><span class="xml">&amp;version_type=external</span></span><br></pre></td></tr></table></figure>
<h4 id="更新文档的部分内容，合并文档"><a href="#更新文档的部分内容，合并文档" class="headerlink" title="更新文档的部分内容，合并文档"></a>更新文档的部分内容，合并文档</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;/_<span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<h4 id="脚本是一些奇怪的逻辑，不过蛮好玩的。"><a href="#脚本是一些奇怪的逻辑，不过蛮好玩的。" class="headerlink" title="脚本是一些奇怪的逻辑，不过蛮好玩的。"></a>脚本是一些奇怪的逻辑，不过蛮好玩的。</h4><h4 id="检索多个文档"><a href="#检索多个文档" class="headerlink" title="检索多个文档"></a>检索多个文档</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> /_mget</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"docs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">            *******</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="批量操作，以换行符来判断，防止不必要的json解析等数据拷贝。"><a href="#批量操作，以换行符来判断，防止不必要的json解析等数据拷贝。" class="headerlink" title="批量操作，以换行符来判断，防止不必要的json解析等数据拷贝。"></a>批量操作，以换行符来判断，防止不必要的json解析等数据拷贝。</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; action: &#123;metadata &#125;&#125; \n</span><br><span class="line">&#123; request body &#125; \n</span><br><span class="line">&#123; action: &#123;metadata &#125;&#125; \n</span><br><span class="line">&#123; request body &#125; \n</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch系列笔记(二) 集群安装]]></title>
      <url>/2016/08/02/es2/</url>
      <content type="html"><![CDATA[<h3 id="two-es"><a href="#two-es" class="headerlink" title="two es"></a>two es</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -ti --name es1 elasticsearch /bin/bash</span></span><br><span class="line"><span class="bash">docker run -ti --name es2 elasticsearch /bin/bash</span></span><br></pre></td></tr></table></figure>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><h4 id="in-es1"><a href="#in-es1" class="headerlink" title="in es1"></a>in es1</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">   cluster<span class="selector-class">.name</span>: elasticsearch-cluster-centos</span><br><span class="line">   node<span class="selector-class">.name</span>: <span class="string">"es-node1"</span></span><br><span class="line">   bootstrap<span class="selector-class">.mlockall</span>: true</span><br><span class="line">   network<span class="selector-class">.host</span>: <span class="number">172.17</span>.<span class="number">0.2</span></span><br><span class="line">   network<span class="selector-class">.publish_host</span>: <span class="number">172.17</span>.<span class="number">0.2</span></span><br><span class="line">   discovery<span class="selector-class">.zen</span><span class="selector-class">.ping</span><span class="selector-class">.unicast</span><span class="selector-class">.hosts</span>: [<span class="string">"172.17.0.3"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="in-es2"><a href="#in-es2" class="headerlink" title="in es2"></a>in es2</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cluster<span class="selector-class">.name</span>: elasticsearch-cluster-centos</span><br><span class="line">node<span class="selector-class">.name</span>: <span class="string">"es-node2"</span></span><br><span class="line">bootstrap<span class="selector-class">.mlockall</span>: true</span><br><span class="line">network<span class="selector-class">.host</span>: <span class="number">172.17</span>.<span class="number">0.3</span></span><br><span class="line">network<span class="selector-class">.publish_host</span>: <span class="number">172.17</span>.<span class="number">0.3</span></span><br><span class="line">discovery<span class="selector-class">.zen</span><span class="selector-class">.ping</span><span class="selector-class">.unicast</span><span class="selector-class">.hosts</span>: [<span class="string">"172.17.0.2"</span>]</span><br></pre></td></tr></table></figure>
<h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/elasticsearch restart</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch系列笔记(一) 基础知识]]></title>
      <url>/2016/08/01/es1/</url>
      <content type="html"><![CDATA[<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">启动docker</span><br><span class="line">docker run -ti <span class="comment">--name es -p 9200:9200 ubuntu:14.04 /bin/bash</span></span><br><span class="line"></span><br><span class="line">更新系统</span><br><span class="line">apt-get <span class="keyword">update</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">upgrade</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> software-properties-common</span><br><span class="line"></span><br><span class="line">安装<span class="keyword">java</span></span><br><span class="line"><span class="keyword">add</span>-apt-repository ppa:webupd8team/<span class="keyword">java</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> <span class="keyword">oracle</span>-java8-installer</span><br><span class="line"></span><br><span class="line">安装es</span><br><span class="line">wget -qO - https://packages.elastic.co/GPG-<span class="keyword">KEY</span>-elasticsearch | sudo apt-<span class="keyword">key</span> <span class="keyword">add</span> -</span><br><span class="line">echo <span class="string">"deb https://packages.elastic.co/elasticsearch/2.x/debian stable main"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span> &amp;&amp; apt-<span class="keyword">get</span> <span class="keyword">install</span> elasticsearch</span><br><span class="line"><span class="keyword">update</span>-rc.d elasticsearch <span class="keyword">defaults</span> <span class="number">95</span> <span class="number">10</span></span><br><span class="line">/etc/init.d/elasticsearch <span class="keyword">start</span></span><br></pre></td></tr></table></figure>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET 'http://172.17.0.2:<span class="number">9200</span>'</span><br></pre></td></tr></table></figure>
<h3 id="install-marvel"><a href="#install-marvel" class="headerlink" title="install marvel"></a>install marvel</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>bin/plugin -i elasticsearch<span class="meta-keyword">/marvel/</span>latest</span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/elasticsearch restart</span><br></pre></td></tr></table></figure>
<h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">curl -X&lt;VERB&gt; '&lt;PROTOCOL&gt;:<span class="comment">//&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;' -d '&lt;BODY&gt;'</span></span><br><span class="line">example :</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/_count?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"query"</span>: &#123;</span><br><span class="line">                <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XPUT <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/1?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"first_name"</span> : <span class="string">"John"</span>,</span><br><span class="line">            <span class="string">"last_name"</span> :  <span class="string">"Smith"</span>,</span><br><span class="line">            <span class="string">"age"</span> :        <span class="number">25</span>,</span><br><span class="line">            <span class="string">"about"</span> :      <span class="string">"I love to go rock climbing"</span>,</span><br><span class="line">            <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/1?pretty'</span></span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty'</span></span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty&amp;q=last_name:Smith'</span></span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"query"</span>: &#123;</span><br><span class="line">                <span class="string">"match"</span>: &#123;</span><br><span class="line">                    <span class="string">"last_name"</span>: <span class="string">"Smith"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"query"</span>: &#123;</span><br><span class="line">                <span class="string">"filtered"</span>: &#123;</span><br><span class="line">                    <span class="string">"filter"</span>: &#123;</span><br><span class="line">                        <span class="string">"range"</span>: &#123;</span><br><span class="line">                            <span class="string">"age"</span>: &#123; <span class="string">"gt"</span>: <span class="number">20</span> &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">"query"</span>: &#123;</span><br><span class="line">                        <span class="string">"match"</span>: &#123;</span><br><span class="line">                            <span class="string">"last_name"</span>: <span class="string">"Smith"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"query"</span> : &#123;</span><br><span class="line">                <span class="string">"match"</span> : &#123;</span><br><span class="line">                    <span class="string">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"query"</span> : &#123;</span><br><span class="line">                <span class="string">"match_phrase"</span> : &#123;</span><br><span class="line">                    <span class="string">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"query"</span> : &#123;</span><br><span class="line">                <span class="string">"match_phrase"</span> : &#123;</span><br><span class="line">                    <span class="string">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"highlight"</span>: &#123;</span><br><span class="line">                <span class="string">"fields"</span>: &#123;</span><br><span class="line">                    <span class="string">"about"</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br><span class="line">    curl -XGET <span class="symbol">'http</span>:<span class="comment">//172.17.0.2:9200/megacorp/employee/_search?pretty' -d '</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"aggs"</span>: &#123;</span><br><span class="line">                <span class="string">"all_interests"</span>: &#123;</span><br><span class="line">                    <span class="string">"terms"</span>: &#123; <span class="string">"field"</span>: <span class="string">"interests"</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    '</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker-swarm]]></title>
      <url>/2016/07/22/docker-swarm/</url>
      <content type="html"><![CDATA[<p>前段时间，我和公司的运维朋友一起玩了下docker。在配置docker-swarm的时候，运维朋友可以安逸地开启aws，可怜的我只能默默地在自己的单机上面搭建了~~</p>
<p>所以，才有了今天在用docker-machine来搭建docker-swarm，这份教程基本是按照docker-swram的官方教程改的~</p>
<h4 id="创建docker-machine"><a href="#创建docker-machine" class="headerlink" title="创建docker-machine"></a>创建docker-machine</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-machine <span class="built_in">create</span> <span class="comment">--driver virtualbox consul</span></span><br><span class="line">docker-machine <span class="built_in">create</span> <span class="comment">--driver virtualbox manager1</span></span><br><span class="line">docker-machine <span class="built_in">create</span> <span class="comment">--driver virtualbox manager2</span></span><br><span class="line">docker-machine <span class="built_in">create</span> <span class="comment">--driver virtualbox node1</span></span><br><span class="line">docker-machine <span class="built_in">create</span> <span class="comment">--driver virtualbox node2</span></span><br></pre></td></tr></table></figure>
<h4 id="配置consul"><a href="#配置consul" class="headerlink" title="配置consul"></a>配置consul</h4><p>切换到consul虚机里面：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span> $(docker-machine <span class="keyword">env</span> consul)</span><br></pre></td></tr></table></figure>
<p>启动consul服务：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d -p 8500:8500 <span class="attribute">--name</span>=consul progrium/consul -server -bootstrap</span><br></pre></td></tr></table></figure>
<h4 id="配置manager节点"><a href="#配置manager节点" class="headerlink" title="配置manager节点"></a>配置manager节点</h4><p>配置manager1节点：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval $(docker-machine env manager1)</span><br><span class="line">docker run -d -p <span class="number">4000</span>:<span class="number">4000</span> -v <span class="regexp">/var/</span>lib<span class="regexp">/boot2docker:/</span><span class="string">certs:</span>ro swarm manage -<span class="string">H :</span><span class="number">4000</span> --tlsverify --tlscacert=<span class="regexp">/certs/</span>ca.pem --tlscert=<span class="regexp">/certs/</span>server.pem --tlskey=<span class="regexp">/certs/</span>server-key.pem --replication --advertise $(docker-machine ip manager1):<span class="number">4000</span> <span class="string">consul:</span><span class="comment">//$(docker-machine ip consul):8500</span></span><br></pre></td></tr></table></figure>
<p>配置manager2节点：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval $(docker-machine env manager2)</span><br><span class="line">docker run -d -p <span class="number">4000</span>:<span class="number">4000</span> -v <span class="regexp">/var/</span>lib<span class="regexp">/boot2docker:/</span><span class="string">certs:</span>ro swarm manage -<span class="string">H :</span><span class="number">4000</span> --tlsverify --tlscacert=<span class="regexp">/certs/</span>ca.pem --tlscert=<span class="regexp">/certs/</span>server.pem --tlskey=<span class="regexp">/certs/</span>server-key.pem --replication --advertise $(docker-machine ip manager2):<span class="number">4000</span> <span class="string">consul:</span><span class="comment">//$(docker-machine ip consul):8500</span></span><br></pre></td></tr></table></figure>
<h4 id="配置node节点"><a href="#配置node节点" class="headerlink" title="配置node节点"></a>配置node节点</h4><p>配置node1节点</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span> $(docker-machine <span class="keyword">env</span> node1)</span><br><span class="line">docker run -d swarm join --advertise=$(docker-machine ip node1):<span class="number">2376</span> consul:<span class="comment">//$(docker-machine ip consul):8500</span></span><br></pre></td></tr></table></figure>
<p>配置node2节点</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span> $(docker-machine <span class="keyword">env</span> node2)</span><br><span class="line">docker run -d swarm join --advertise=$(docker-machine ip node2):<span class="number">2376</span> consul:<span class="comment">//$(docker-machine ip consul):8500</span></span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H :4000 --tlsverify <span class="attribute">--tlscacert</span>=/var/lib/boot2docker/ca.pem <span class="attribute">--tlscert</span>=/var/lib/boot2docker/server.pem <span class="attribute">--tlskey</span>=/var/lib/boot2docker/server-key.pem <span class="builtin-name">run</span> hello-world</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[思考]]></title>
      <url>/2016/06/23/%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>从06-09开始，准备写这一篇文章，那天是端午节，在宿舍里面看G3，期待詹姆斯可以赢得这一场比赛，避免被横扫的命运。从那天起，在上班的时候，总是偷偷地看着NBA的文字直播，见证了41-41的G5，爆发的G6，到最后的G7时，我偷偷地带上了耳机，在mac上听起了直播，听完了G7和最后的发布会。也许竞技体育的魅力就在与此，一切皆有可能。06-20，骑士和勇士创造了很多历史，不过是成功夺冠的骑士，还是73胜的勇士，都是一样的伟大。</p>
<p>那一天的发布会上，有位记者问詹姆斯，这次的夺冠和之前的夺冠相比，有什么不同的感受，詹姆斯是这么回答的，“I’m home!”。</p>
<p>这感觉，真好。自从毕业之后，总是少了一点什么，大概也有这个吧。读书时，父母的期望时可以拿到很好的排名和好看的成绩单。那时的我，也没什么想法，只是多看看书，当然，虽然更多的是课外书，但是也是在保持足够的竞争力下。不需要十分刻意地去追求前多少名的成绩，不需要去思考提高语文英语的成绩来弥补短板。那段日子里，我学了很多我想学的知识，通过书籍，去了解很多人的人生。在满足家人和自己的世界里，我活出了自己想要的生活。而如今我顺利地毕业了，成为了一个程序员。但这真的是我想要的么？</p>
<p>我知道不是。</p>
<p>上了社会，虽然作为程序员拿到的工资辉比较高，但是突然发现，在北上广深的世界里，自己所能赚到的工资还是太低太低了。当然，作为一个出入社会的毕业生，自己所能创造的价值实际上也不是很多。很高兴的是，我一再的提醒自己，要守住本心，靠着自己的实力和努力去换取生活的资本。</p>
<p>感谢我小学的老师，教会了我仔细，而我的母亲，则教会了我学会耐心。让我在如此漫长地人生中，学会了成长。而我也很清楚地知道，自己喜欢的是数学，对数字天生的敏感。也许在程序员的领域里面，我更喜欢大数据，或者是人工智能，而不是写业务。我更喜欢知道一个东西为什么这么设计，而不是知道这么东西怎么用。</p>
<p>2016-06-23，一年前，我从大学毕业，用了任性地方式给了自己一份很好的毕业礼物。一年后，我开始反思，我应该自己学习，好好地深入理解后端，去知道更多的为什么，还是应该创作属于自己的作品。</p>
<p>也许其他人无法明白，为什么我不喜欢成功，不喜欢大公司好前景。也许我渴望的自由生活，本就是没有目标的吧。所谓的骄傲，就是靠自己和团队的努力，所获得的成就。希望好好努力，未来会好，世界会更好。</p>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[multinet]]></title>
      <url>/2016/05/20/multinet/</url>
      <content type="html"><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>之前一段时间发现自己用go开发程序的过程中，大部分的时间都是用了标准的HTTP库，而没用到其他方式，比如单纯的TCP。在查看了go的标准库后，发现这个TCP库并没有想象中的好用，因此，我自己开始着手写一个好用点的。</p>
<h4 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h4><p>在解决黏包的问题时，曾经尝试运用go标准库中的json库，将数据打包成为一个结构体的方式，确实时解决了黏包的问题，但是由于go的json库效率不高，整体的效率下下降了2-3倍。最后使用了最简单的模式，通过添加head的方式，达到得知传输的data的长度，进而解决了黏包的问题，而且效率上的影响可以忽略不计。</p>
<p>在解决了黏包的问题之后，我也通过控制代理的模式，发现在高并发的情况下，也许服务端同时需要多次创建or关闭TCP连接，来达到通讯的目的。而实际TCP的使用中，或许大部分时间内，会有TCP连接处于空闲的阶段，那是否可以复用呢？</p>
<p>因此，在multinet中，在一条TCP Connetion被创建的时候，调用库将同时创建n条连接，n为可配置参数。之后返回一个虚拟Conn供代码调用。在实际写入的过程中，conn在接收到调用者的写入之后，空闲的tcp连接会接受这个请求，将数据传给目标，而目标连接会根据读取的数据，分配给指定的虚拟Conn。</p>
<p>在传输的过程中，TCP连接们，会在连接数过少，数据拥挤的时候，自动地创建新的连接来处理数据，当然，服务端也会反馈数据拥挤问题给客户端，让他创建新的连接。当然，这种方式还是比较简单粗暴的～～</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>一个写着玩的项目，multinet，目前放在了我的github上。地址见右上，在那个也许还没发现的地方。哈哈。</p>
]]></content>
      
        <categories>
            
            <category> golang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[golang的debug方式]]></title>
      <url>/2016/01/27/golang%E7%9A%84debug%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程是轻量级的线程，在Go语言中对应着goroutine，由Go Runtime管理。由于Go在运行的过程中，如果多个goroutine在同时运行，当且仅当运行这个goroutine的线程被阻塞的时候，调度器也才会运行另外的goroutine。</p>
<h3 id="这就意味着"><a href="#这就意味着" class="headerlink" title="这就意味着"></a>这就意味着</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>这种函数被调用之后，这个goroutine会长期霸占着线程，而其它goroutine就只能饿死在内存中。<br>这种情况下，通过strace -f去跟踪系统调用的debug方式，是无法获取正确的信息。</p>
<h3 id="kill大法"><a href="#kill大法" class="headerlink" title="kill大法"></a>kill大法</h3><p>Go程序在默认的信号处理中，如果收到了<em>SIGQUIT</em>的信号时，会将正在运行时的goroutine的调用栈输出。即：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -3 ***</span><br></pre></td></tr></table></figure>
<p>然后知道，自己是怎么坑自己的！</p>
]]></content>
      
        <categories>
            
            <category> golang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次debug的坑]]></title>
      <url>/2015/11/20/%E8%AE%B0%E4%B8%80%E6%AC%A1debug%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>这个故事告诉我们，永远不要相信自己的眼睛。</p>
<h2 id="那天"><a href="#那天" class="headerlink" title="那天"></a>那天</h2><p>天气晴朗，阳光明媚~<br>我用Go写了一段程序，程序中需要通过从文件中读取一段文字，然后拼入sql中，然后在数据库中执行。</p>
<p>由于我需要从文件中一行一行的读出数据，我用了这样子的方式读取。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readLines</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">(lines []<span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">       <span class="keyword">var</span> (</span><br><span class="line">           file   *os.File</span><br><span class="line">           part   []<span class="keyword">byte</span></span><br><span class="line">           prefix <span class="keyword">bool</span></span><br><span class="line">       )</span><br><span class="line">       <span class="keyword">if</span> file, err = os.Open(path); err != <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">       reader := bufio.NewReader(file)</span><br><span class="line">       buffer := bytes.NewBuffer(<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>))</span><br><span class="line">       <span class="keyword">for</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> part, prefix, err = reader.ReadLine(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           &#125;</span><br><span class="line">           buffer.Write(part)</span><br><span class="line">           <span class="keyword">if</span> !prefix &#123;</span><br><span class="line">               lines = <span class="built_in">append</span>(lines, buffer.String())</span><br><span class="line">               buffer.Reset()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">           err = <span class="literal">nil</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>调用的时候，我通过用了大概如下的代码：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lines， <span class="keyword">err</span> := readLines(userFile)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">	<span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, <span class="keyword">line</span> := <span class="keyword">range</span> lines &#123;</span><br><span class="line">	sqlStr := rawSql % <span class="keyword">line</span></span><br><span class="line">	_, <span class="keyword">err</span> = dbConn.Exec(sqlStr)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">		<span class="built_in">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然它报错了！这样子的错误信息~</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="number">1064</span>: You have <span class="keyword">an</span> error <span class="keyword">in</span> your SQL syntax; check <span class="keyword">the</span> manual that corresponds <span class="built_in">to</span> your MySQL server <span class="built_in">version</span> <span class="keyword">for</span> <span class="keyword">the</span> <span class="literal">right</span> syntax <span class="built_in">to</span> use near <span class="string">''</span> <span class="keyword">at</span> <span class="built_in">line</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>通过查阅，我发现这个near ‘’，是的竟然是空的，不像一般的写错sql语句一样是会写明错误信息~<br>瞬间我就神经开始大条了。</p>
<pre><code>难道我后面写漏了什么？
怎么可能！
不，我得先去喝杯水，然后再来看看。
水果到了，再吃个苹果。
吃完洗个手-。-
我觉得没错啊！
F**k
</code></pre><h2 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h2><p>不玩了，之所以我会认为自己没错，是因为我将整个sql语句打印了出来，在肉眼确认没错之后，又去mysql得命令行中直接执行了语句，结果十分顺利。<br>最后，十分大条的将从文件中读取出来的lines用长度打印了出来，瞬间我就斯巴达了！  </p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, <span class="built_in">line</span> := <span class="built_in">range</span> lines &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"len[%s] is %d"</span>, <span class="built_in">line</span>, <span class="built_in">len</span>(<span class="built_in">line</span>))</span><br><span class="line">	sqlStr := rawSql % <span class="built_in">line</span></span><br><span class="line">	fmt.Printf(<span class="string">"sqlStr[%s] is %d"</span>, <span class="built_in">line</span>, <span class="built_in">len</span>(sqlStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果。。。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">len<span class="comment">[*****]</span> <span class="keyword">is</span> 1024!</span><br><span class="line">sqlStr<span class="comment">[*****]</span> <span class="keyword">is</span> 1065!</span><br></pre></td></tr></table></figure>
<p>这就是为什么我执行失败的原因！sqlStr里面，存在着一段空白的buffer！却是打印不出来的~<br>最后我把代码改成了这样~</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data, <span class="keyword">err</span> = ioutil.ReadAll(userFile)</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">	<span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line">lines := strings.<span class="keyword">Split</span>(<span class="built_in">string</span>(data), <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2>]]></content>
      
        <categories>
            
            <category> golang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[仅仅]]></title>
      <url>/2015/11/13/%E4%BB%85%E4%BB%85/</url>
      <content type="html"><![CDATA[<p>独自一人<br>漫步入街头的咖啡厅<br>倚在窗边<br>约定的时刻已经过去<br>又该如何？<br>仅仅因为相信<br>仅仅等待五分钟。    </p>
<p>厅外<br>一辆小吃车<br>一个小女孩站在小凳子上<br>忙碌地为客人做着各式的小吃<br>人来人往<br>钱来食往！</p>
<p>厅内<br>静静地拿起手机<br>熟练地按下号码<br>猛然一惊！<br>却按下了断线<br>仅仅因为相信<br>仅仅等待五分钟。</p>
<p>厅外<br>开始下起小雨<br>小女孩吃力地撑起大篷伞<br>小雨淅沥<br>行人渐少<br>生意也冷清了许多<br>偶尔几个人匆忙而至<br>买了些许离去    </p>
<p>厅内<br>呆呆地看笑着<br>缓缓地按下字母键<br>写完了短信<br>却按了删除一键！<br>凝望着街头的拐角<br>仅仅因为相信<br>仅仅再等五分钟。</p>
<p>厅外<br>小雨渐大<br>环视四周<br>女孩只将车拉至屋檐下<br>为什么？<br>早市也该收了吧    </p>
<p>厅内<br>开始欺骗自己<br>一定会来的<br>站起来转身离开<br>走下台阶<br>第一眼望向街口<br>仅仅因为相信<br>仅仅这样离开<br>只希望自己来得太早太早。</p>
<p>屋檐下<br>那个女孩好像在发抖<br>为什么？<br>服务员说<br>那个欺骗小女孩的人<br>不可能回来的    </p>
<p>台阶下<br>呆呆地<br>她在等待那个人回来吗？<br>为什么就舍得骗她<br>双目开始颤抖<br>降温了<br>转身迈进        </p>
<p>屋檐下<br>女孩说，一定会来的！<br>猛然一怔<br>她笑了。    </p>
<p>屋檐下<br>钱被折成了小花<br>变戏法的送上<br>曾经练习了千遍<br>如今献给了另一个<br>转身离开<br>仅仅因为相信<br>仅仅这样离开</p>
<p>这算是believe<br>里面也隐藏着lie</p>
<p>街上<br>停伫回首<br>女孩朝着反方向离开<br>会吗？<br>仅仅因为相信<br>仅仅这样离开。        </p>
<p>街上<br>停伫<br>回首<br>女孩露出无邪的笑</p>
<p>街头<br>雨还在下<br>风却停了<br>一步步地迈向街头<br>那个身影<br>熟悉到陌生                </p>
<p>–你来啦！<br>–对不起，让你等那么久。。。<br>—-呀，你都湿透了！<br>–没事啦，走吧。<br>–什么？<br>–去吃小吃？<br>–好啊！        </p>
<p>仅仅因为相信。<br>雨在下。<br>天已晴。        </p>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nagios和ganglia]]></title>
      <url>/2015/11/11/nagios%E5%92%8Cganglia/</url>
      <content type="html"><![CDATA[<h2 id="老生常谈–监控"><a href="#老生常谈–监控" class="headerlink" title="老生常谈–监控"></a>老生常谈–监控</h2><p>很远很久以前，看到过运维的同事在搞监控系统，自己这个苦逼的开发也在有空闲的时间里面，玩玩而已。  </p>
<p>服务器是用了腾讯云的，裸机~~，系统是ubuntu的。<br>参考了<a href="http://idevit.nl/node/93" target="_blank" rel="noopener">idevit</a></p>
<h2 id="INSTALL-NAGIOS"><a href="#INSTALL-NAGIOS" class="headerlink" title="INSTALL NAGIOS"></a>INSTALL NAGIOS</h2><p>这次的安装是源码安装，现在ubuntu的apt-get安装了nagios还是3版本的，所以还是多折腾，去下载源码咯。<br>先安装一些依赖的软件：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install libperl-<span class="built_in">dev</span> libpng12-<span class="built_in">dev</span> libgd2-xpm-<span class="built_in">dev</span> build-essential php5-gd wget nginx spwan-fcgi fcgiwrap php5-fpm </span><br></pre></td></tr></table></figure>
<p>本次的安装时4.1.1版本的。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>assets.nagios.com<span class="regexp">/downloads/</span>nagioscore<span class="regexp">/releases/</span>nagios-<span class="number">4.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">wget http:<span class="regexp">//</span>www.nagios-plugins.org<span class="regexp">/download/</span>nagios-plugins-<span class="number">2.1</span>.<span class="number">1</span>.tar.gz</span><br></pre></td></tr></table></figure>
<p>下载解压到服务器之中~</p>
<p>创建用户nagios和用户组nagcmd</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">adduser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">system</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">no</span><span class="literal">-</span><span class="comment">create</span><span class="literal">-</span><span class="comment">home</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">disabled</span><span class="literal">-</span><span class="comment">login</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group</span> <span class="comment">nagios</span></span><br><span class="line"><span class="comment">groupadd</span> <span class="comment">nagcmd</span></span><br><span class="line"><span class="comment">usermod</span> <span class="literal">-</span><span class="comment">G</span> <span class="comment">nagcmd</span> <span class="comment">nagios</span></span><br><span class="line"><span class="comment">usermod</span> <span class="literal">-</span><span class="comment">a</span> <span class="literal">-</span><span class="comment">G</span> <span class="comment">nagcmd</span> <span class="comment">www</span><span class="literal">-</span><span class="comment">data</span></span><br></pre></td></tr></table></figure>
<p>配置nagios源码安装：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> nagios-4.1.1</span><br><span class="line"><span class="string">./configure</span> <span class="params">--prefix</span> <span class="string">/usr/local/nagios</span> <span class="params">--sysconfdir=/etc/nagios</span> <span class="params">--with-command-user=nagios</span> <span class="params">--with-command-group=nagcmd</span></span><br><span class="line"><span class="comment">#这里会检测所需的环境~</span></span><br><span class="line">make all</span><br><span class="line">   make install</span><br><span class="line">   make install-init</span><br><span class="line">   make install-config</span><br><span class="line">   make install-commandmode</span><br><span class="line"><span class="comment">#这里是将开始编译，安装到指定目录，分发配置文件和配置了命令</span></span><br></pre></td></tr></table></figure>
<p>安装完毕之后,这时候你可以把安装包里面的插件cp过来</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -rvf contrib<span class="regexp">/eventhandlers/</span> <span class="regexp">/usr/</span>local<span class="regexp">/nagios/</span>libexec/</span><br><span class="line">chown -R <span class="string">nagios:</span>nagios <span class="regexp">/usr/</span>local<span class="regexp">/nagios/</span>libexec/eventhandlers</span><br></pre></td></tr></table></figure>
<p>nagios需要验证用户的权限，由于本次安装不想使用apache，选用了nginx，所以这次是通过以下的命令来生产用户验证的文件的。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//trac.edgewall.org/export/10791/trunk/contrib/htpasswd.py</span></span><br><span class="line">chmod +x htpasswd.py</span><br><span class="line">htpasswd<span class="selector-class">.py</span> -c -<span class="selector-tag">b</span> /etc/nagios/htpasswd<span class="selector-class">.users</span> nagiosadmin password</span><br></pre></td></tr></table></figure>
<p>这里的nagiosadmin是用户名，而password是密码，如果想要重新修改用户名的话，需要在/etc/nagios/cfg.cfg文件中加入权限。<br>比如用户名是catlittlechen的话，可以修改成下面这样子</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">authorized_for_system_information</span>=nagiosadmin,catlittlechen</span><br></pre></td></tr></table></figure>
<p>安装下nagios官方提供的插件</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> nagios-plugins-2.1.1</span><br><span class="line"><span class="string">./configure</span> <span class="params">--with-nagios-user=nagios</span> <span class="params">--with-nagios-group=nagios</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>之后可以通过执行下面的指令来验证下是否成功的配置了nagios</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nagios/</span>bin<span class="regexp">/nagios -v /</span>etc<span class="regexp">/nagios/</span>nagios.cfg</span><br></pre></td></tr></table></figure>
<p>启动的时候，这边的找了下，发现在/etc/rc.d/下，有一个nagios的脚本，就链接过来了/etc/init.d/nagios,然后就可以执行下面的命令启动来。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nagios <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<p>弱弱的说，nginx配置在最下面~</p>
<h3 id="INSTALL-GANGLIA"><a href="#INSTALL-GANGLIA" class="headerlink" title="INSTALL GANGLIA"></a>INSTALL GANGLIA</h3><p>安装ganglia只是为了便捷的弥补下nagios只有定时检测的特性，当然，你可以尝试安装pnp4nagios来完成这个功能，但是ganglia更加的强大一些，而且真得简单啊。<br>命令：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install -y ganglia-monitor rrdtool gmetad ganglia-webfrontend</span><br></pre></td></tr></table></figure>
<p>这时候需要修改两个地方的配置文件</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ganglia/gmetad.conf</span><br><span class="line"><span class="comment">#data_source "my cluster" localhost</span></span><br><span class="line">data_source <span class="string">"cat chen"</span> localhost</span><br><span class="line">vim /etc/ganglia/gmond.conf</span><br><span class="line">cluster &#123;</span><br><span class="line">	#name = <span class="string">"unspecified"</span></span><br><span class="line">	name = <span class="string">"cat chen"</span></span><br><span class="line">	owner = <span class="string">"unspecified"</span></span><br><span class="line">	latlong = <span class="string">"unspecified"</span></span><br><span class="line">	url = <span class="string">"unspecified"</span></span><br><span class="line">&#125;</span><br><span class="line">udp_send_channel  &#123;</span><br><span class="line">	#mcast_join = 239.2.11.71</span><br><span class="line">	host = localhost</span><br><span class="line"><span class="built_in">	port </span>= 8649</span><br><span class="line">	ttl = 1</span><br><span class="line">&#125;</span><br><span class="line">udp_recv_channel &#123;</span><br><span class="line">	#mcast_join = 239.2.11.71</span><br><span class="line"><span class="built_in">	port </span>= 8649</span><br><span class="line">	#bind = 239.2.11.71</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后执行下面的语句重启下服务</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ganglia-monitor restart &amp;&amp;<span class="built_in"> service </span>gmetad restart</span><br></pre></td></tr></table></figure>
<p>杠杠的，ganglia就这么搞定了~<br>这里为了习惯问题，我还执行了以下的命令</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r <span class="regexp">/usr/</span>share<span class="regexp">/ganglia-webfrontend/</span>  <span class="regexp">/var/</span>www/</span><br><span class="line">mv <span class="regexp">/var/</span>www<span class="regexp">/ganglia-webfrontend /</span>var<span class="regexp">/www/</span>ganglia</span><br></pre></td></tr></table></figure>
<h3 id="Nagios-amp-amp-Ganglia"><a href="#Nagios-amp-amp-Ganglia" class="headerlink" title="Nagios &amp;&amp; Ganglia"></a>Nagios &amp;&amp; Ganglia</h3><p>最后，当然是配合ganglia和nagios了。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/ganglia/monitor-core/</span><br><span class="line"><span class="keyword">cp</span> monitor-core/contrib/check_ganglia.<span class="keyword">py</span> /usr/local/nagios/libexec</span><br><span class="line">chown nagio<span class="variable">s:nagios</span> check_ganglia.<span class="keyword">py</span></span><br><span class="line">chmod +<span class="keyword">x</span> check_ganglia.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<p>为了让nagios可以使用这个插件，需要在command配置中加入以下的配置</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/objects/commands.cfg</span><br><span class="line">define command &#123;</span><br><span class="line">       command_name check_ganglia</span><br><span class="line">       command_line <span class="variable">$USER1</span><span class="variable">$/</span>check_ganglia.py -h <span class="variable">$HOSTNAME</span><span class="variable">$ </span>-m <span class="variable">$ARG1</span><span class="variable">$ </span>-w <span class="variable">$ARG2</span><span class="variable">$ </span>-c <span class="variable">$ARG3</span>$</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就可以在配置项目里面配置相应的监控目标，比如我简答的配置如下</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nagios/objects/localhost.cfg</span><br><span class="line">define<span class="built_in"> service </span>&#123;</span><br><span class="line">       use     local-service</span><br><span class="line">       host_name       localhost</span><br><span class="line">       service_description     Ganglia Bytes Out</span><br><span class="line">       check_command   check_ganglia!bytes_out!80000!100000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define<span class="built_in"> service </span>&#123;</span><br><span class="line">       use     local-service</span><br><span class="line">       host_name       localhost</span><br><span class="line">       service_description     Ganglia Disk Free</span><br><span class="line">       check_command   check_ganglia!disk_free!20!10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更加详细的配置，好书推荐，可以参考下<a href="http://nagios-cn.sourceforge.net/nagios-cn/configuration.html" target="_blank" rel="noopener">nagios_cn</a></p>
<h3 id="nginx配置："><a href="#nginx配置：" class="headerlink" title="nginx配置："></a>nginx配置：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">10086</span></span><br><span class="line">       server_name nagios.catlittlechen.com;</span><br><span class="line">       <span class="attribute">access_log</span>  /var/log/nginx/nagios.access.log;</span><br><span class="line">       <span class="attribute">error_log</span>   /var/log/nginx/nagios.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line"> 		<span class="attribute">auth_basic</span>            <span class="string">"Restricted Nagios Area!"</span>;</span><br><span class="line"> 		<span class="attribute">auth_basic_user_file</span>  /etc/nagios/htpasswd.users;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">root</span>    /var/www;</span><br><span class="line">       <span class="attribute">index</span>   index.php index.html;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> /nagios &#123;</span><br><span class="line">           <span class="attribute">index</span> index.php;</span><br><span class="line">           <span class="attribute">alias</span> /usr/local/nagios/share/;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="attribute">location</span> /ganglia &#123;</span><br><span class="line">           <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ ^/nagios/(.*\.php)$</span> &#123;</span><br><span class="line">           <span class="attribute">alias</span> /usr/local/nagios/share/<span class="variable">$1</span>;</span><br><span class="line">           <span class="attribute">include</span> /etc/nginx/fastcgi.conf;</span><br><span class="line">           <span class="attribute">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ \.cgi$</span> &#123;</span><br><span class="line">           <span class="attribute">root</span> /usr/local/nagios/sbin/;</span><br><span class="line">           <span class="attribute">rewrite</span><span class="regexp"> ^/nagios/cgi-bin/(.*)\.cgi</span> /<span class="variable">$1</span>.cgi <span class="literal">break</span>;</span><br><span class="line">           <span class="attribute">fastcgi_param</span> AUTH_USER <span class="variable">$remote_user</span>;</span><br><span class="line">           <span class="attribute">fastcgi_param</span> REMOTE_USER <span class="variable">$remote_user</span>;</span><br><span class="line">           <span class="attribute">include</span> /etc/nginx/fastcgi.conf;</span><br><span class="line">           <span class="attribute">fastcgi_pass</span> unix:/var/run/fcgiwrap.socket;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">           <span class="attribute">include</span> /etc/nginx/fastcgi.conf;</span><br><span class="line">           <span class="attribute">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">               <span class="attribute">deny</span> all;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>晒图，别吐槽我的垃圾服务器</p>
<p><img src="http://7xnn4y.com1.z0.glb.clouddn.com/E73986A3-89CE-4BDF-8601-CC53F38C64ED.png" alt="ganglia"><br><img src="http://7xnn4y.com1.z0.glb.clouddn.com/76CE6A52-D7EC-42B8-90B5-C34B1D596421.png" alt="nagios"></p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nagios </tag>
            
            <tag> ganglia </tag>
            
            <tag> 监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自建DNS服务器]]></title>
      <url>/2015/10/19/%E8%87%AA%E5%BB%BADNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>今天有时间，我想看下自己建立DNS服务器，是怎么样的流程。<br>结果发现是如此的简单。</p>
<p>以下是基于ubuntu的。</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>域名管理系统DNS(Domain Name System)，是通过域名来解析到IP的一种网络服务，自建DNS服务器，可以在内网中，自己设定特定的域名解析，达到内网机器可以无需配置host，达到访问内网服务的作用。</p>
<h3 id="DNS记录-备忘-："><a href="#DNS记录-备忘-：" class="headerlink" title="DNS记录(备忘)："></a>DNS记录(备忘)：</h3><ul>
<li>A记录：        主机名或者域名 –&gt; 相应的IP地址；</li>
<li>NS记录：        记录域名有哪些DNS服务器来解析；</li>
<li>CNAME记录：    将域名的解析转到另外一个域名上去；</li>
<li>MX记录：        一个网络里面的电子邮件服务引导到特定服务器；</li>
<li>TXT记录：        提供了域名的文本信息；</li>
</ul>
<h2 id="Bind9"><a href="#Bind9" class="headerlink" title="Bind9"></a>Bind9</h2><p>bind(berkeley Internet Name Daemon)<br>建立DNS服务器，在ubuntu下只需要安装bind9就可以了。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install bind9</span><br></pre></td></tr></table></figure></p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>bind9可以配置多种DNS服务器:</p>
<ol>
<li>缓冲服务器，用于缓存DNS服务，减少带宽使用；</li>
<li>主服务器，用于记录DNS服务信息；</li>
<li>从服务器，完整的备份主服务器的内容；</li>
<li>混合服务器，多种服务器合并的累心；</li>
<li>私用的主从服务器；</li>
</ol>
<h3 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h3><pre><code>cd /etc/bind/
</code></pre><p>可以看出在目录下面有多个name.conf*的文件，为配置文件；db.*的文件为DNS记录文件；*.keys文件是Bind在交互过程中用于检验的秘钥。    </p>
<h4 id="name-conf-options"><a href="#name-conf-options" class="headerlink" title="name.conf.options"></a>name.conf.options</h4><ul>
<li>forwarders: 选择现有的DNS提供商，以’;’分割，如果不写的话，这个地方会被默认为root名称服务器来解析，速度会特别慢；</li>
<li>directory “filename”: 用于存放该区域数据的文件；</li>
<li>forward first: 在尝试通过root服务器解析DNS请求先，对DNS请求进行转发(forward only 不进行转发)；</li>
<li>listen-on port *port{ ip-address;}: 指定监听哪一些网络接口(默认是127.0.0.1或者localhost)或者哪一个端口(默认是53)来监听客户端的查询；</li>
<li>listen-on-v6 *port{any;}: 指定Bind通过哪一个多端口去监听IPv6的客户端请求，any只可以被none代替；</li>
<li>query-source[-v6] address <em> port </em>: 服务器在查询解析的域名的时候，是有可能查询不到的而向其他服务器查询，因此，query-source可以设定这类查询采用什么样的地址和端口。这里的port只用于UDP的请求，TCP请求会随机使用一个大于1024的端口；</li>
<li>allow_query {ip-address;}: 指定说哪一些IP的网络可以进行普通的查询；</li>
<li>allow_transfer: 指定说哪一些IP的网络可以进行域的传输；</li>
<li>statistics-interval: 生成统计信息；设置为0，则不生成；</li>
<li>cleaning-interval: 缓存时间；</li>
<li>interface-interval: 定期检测网络接口中存在的接口，设置为0，则不扫描；</li>
<li>notify no: 在区域数据改动或者重启服务时，是否通知其他服务器；</li>
<li>dump-file “filename”: 执行rndc dumpdb时，存放的路径；</li>
</ul>
<h4 id="name-conf-logging"><a href="#name-conf-logging" class="headerlink" title="name.conf logging"></a>name.conf logging</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">	logging </span>&#123;</span><br><span class="line"> 			[ channel channel_name &#123;</span><br><span class="line">   			( file path_name</span><br><span class="line">       		[ versions ( number | unlimited ) ]</span><br><span class="line">       		[ size size_spec ]</span><br><span class="line">       		[ syslog (syslog_facility） | stderr | <span class="literal">null</span>)];</span><br><span class="line">   			[ severity (critical | <span class="builtin-name">error</span> | <span class="builtin-name">warning</span> | notice | <span class="builtin-name">info</span> | <span class="builtin-name">debug</span> [ level ] | dynamic ); ]</span><br><span class="line">   			[ print-category <span class="literal">yes</span> | <span class="literal">no</span>; ]</span><br><span class="line">   			[ print-severity <span class="literal">yes</span> | <span class="literal">no</span>; ]</span><br><span class="line">   			[ print-time <span class="literal">yes</span> | <span class="literal">no</span>; ]</span><br><span class="line"> 			&#125;; ]</span><br><span class="line"> 			[ category category_name &#123;</span><br><span class="line">   			channel_name ; [ channel_name ; <span class="built_in">..</span>. ]</span><br><span class="line"> 			&#125;; ]</span><br><span class="line"> 			<span class="built_in">..</span>.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>file: 日志文件的路径；</li>
<li>versions, size: 用于控制日志文件的版本；<ol>
<li>如果size设置，versions没有设置，则写满日志文件之后，就会停止写入；</li>
<li>如果size，versions设置，则写满日志文件之后，会更新日志文件版本，继续写入；</li>
<li>如果size没设置，versions设置了，将会在Bind重启的时候再更新日志文件的版本；</li>
</ol>
</li>
<li>syslog, stderr, null: 三个参数填写出其中的一个，syslog会将输出的信息输出到系统日志中，详细的配置可以看下syslog，stderr将通道的输出信息重定向到标准错误流中，null则是忽略信息；</li>
<li>category: 这一部分的信息其实是将特定的输出内容写入指定的通道之中；具体有哪些种类的输出内容可以看下官方的介绍，种类太多也就不想列了。</li>
</ul>
<h4 id="name-conf-zone"><a href="#name-conf-zone" class="headerlink" title="name.conf zone"></a>name.conf zone</h4><p>在配置文件中，有name.conf.defaul-zones文件，已经默认的添加了部分DNS记录，而自建dns服务器，达到内网解析的关键，也就是配置这部分的文件。  </p>
<p>zone的配置模板目下所示：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zone “catchenii.com” <span class="keyword">in</span> &#123;</span><br><span class="line"><span class="built_in">	type </span>master;</span><br><span class="line">	file <span class="string">"/etc/bind/db.catchenii.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>type: 指DNS服务器的类型，分别为master(主服务器)，slave(从服务器)，hint(区域服务器)；</li>
<li>file: 区域数据文件；</li>
<li>master{server-ip-address}: 从服务器配置指定从哪个服务器中获取区域数据文件；</li>
<li>allow-update{!*;}: 是否允许外部创建DNS数据文件，默认是禁止的。(这一项就决定着有可能可以动态更新内网的DNS信息)  </li>
</ul>
<p>而对应的<strong>/etc/bind/db.catchenii.com</strong>区域数据文件则如图所示：<br><img src="http://7xnn4y.com1.z0.glb.clouddn.com/2.png" alt="db.catchenii.com"><br>区域文件有两种，一种是IP-&gt;域名，另外一种是域名-&gt;IP,上图当然是域名到IP得数据文件，两份记录的格式也是基本一致：</p>
<pre><code>&apos;.&apos;在区域文件中是由重要的含义的，如果域名没有在末尾加入&apos;.&apos;，则会追加域名在后面，完整的域名必须在末尾加&apos;.&apos;。
</code></pre><ul>
<li>$TTL: 默认的存活时间；</li>
<li>SOA: Start Of Authority 控制记录开始的位置。IN SOA后面是作为该区域的主服务器的名称。</li>
<li>Serial: 每修改一次文件，数字都会添加，用于告诉从服务器改变的通知；</li>
<li>Refresh: 下级服务器来校验serial number的时间间隔；</li>
<li>Retry: 下级服务器连接主服务器时出现错误的重试时间间隔；</li>
<li>Expire: 下级服务器无法联系主服务器时，缓存的超时时间；</li>
<li>Negative Cache TTL: 解析失败的记录的缓存时间；  </li>
</ul>
<p>接下来的数据为DNS的解析记录啦！</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>修改好文件之后，可以重启下服务：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> /etc/init.d/<span class="keyword">bind9 </span>restart</span><br></pre></td></tr></table></figure>
<p>效果如图所示：<br><img src="http://7xnn4y.com1.z0.glb.clouddn.com/3.png" alt="结果图"></p>
<p>嘻嘻。</p>
<h2 id="备记："><a href="#备记：" class="headerlink" title="备记："></a>备记：</h2><p>各类DNS服务器的<a href="https://en.wikipedia.org/wiki/Comparison_of_DNS_server_software" target="_blank" rel="noopener">比较</a>!</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟化技术了解]]></title>
      <url>/2015/09/29/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E4%BA%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="某一天，docker火了！"><a href="#某一天，docker火了！" class="headerlink" title="某一天，docker火了！"></a>某一天，docker火了！</h4><p>相信第一个看了docker的人，当然，不是我这种菜鸟，都会很快的了解到docker所利用的技术和理论，其实早在多年之前，就已经被提出。</p>
<h3 id="LXC"><a href="#LXC" class="headerlink" title="LXC:"></a>LXC:</h3><p>lxc(Linux Containers)，是一种基于<strong>容器</strong>的操作系统层次的虚拟化技术，通过<strong>cgroup</strong>来控制硬件分配的，如CPU的使用率，内存的最大使用值等，通过<strong>namespace</strong>来隔离硬件环境。<br>这个点上推荐下陈皓先生的<a href="http://coolshell.cn/articles/17049.html" target="_blank" rel="noopener">文章</a>,通过了浅显易通的描述，可以帮读者更好的了解下docler及其运用的技术。</p>
<h3 id="KVM："><a href="#KVM：" class="headerlink" title="KVM："></a>KVM：</h3><p>KVM(kernel-bases Virtual Machine),是基于Linux的<strong>hypervisor</strong>解决方案，也是首个被集成到Linux内核的hypervisor解决方案，并且是实现了完整的虚拟化的。新的操作系统会成为宿主操作系统的一个进程，通过/dev/kvm设备映射，拥有了自己的虚拟地址，因此，kvm是用了底层硬件的虚拟化支持来提供完整的虚拟化。</p>
<h2 id="SO："><a href="#SO：" class="headerlink" title="SO："></a>SO：</h2><p>在虚拟化的性能方面，通过cgroup和namespace等技术的LXC会远超过KVM，但是虚拟化隔离方面，lxc只能说是达到了资源的控制和隔离，而不是真正意义上的硬件隔离，毕竟当你更新了宿主系统上面的一个关键程序的时候，lxc上的容器将很大程度上会收到影响，而kvm拥有完整的操作系统的虚拟化则不会受影响。<br>一切都是有代价的，取舍适当即可。<br>这里有一篇<a href="http://blog.chinaunix.net/uid-20662820-id-4514947.html" target="_blank" rel="noopener">文章</a>，博主通过测试数据，展示了LXC，KVM还有另外一种虚拟化技术XEN的性能数据。</p>
<p>目前，除了<a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>外，目前国内还有另外一个值得关注的项目<a href="https://hyper.sh/" target="_blank" rel="noopener">hyper</a>,是基于hypervisor与docker的项目。</p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO:"></a>TODO:</h3><p>了解下XEN，OVS，CEPH等，写写测试。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 虚拟化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++的模板类]]></title>
      <url>/2015/09/25/c%E7%9A%84%E6%A8%A1%E6%9D%BF%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>昨天帮一个同学debug一个问题，想想也是醉了，太久没写C++，报错信息都看着陌生，还好有万能的<a href="https://www.google.com.hk/" target="_blank" rel="noopener">Google</a>，让我从<a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a>中找到了答案。</p>
<h2 id="开始讲故事"><a href="#开始讲故事" class="headerlink" title="开始讲故事"></a>开始讲故事</h2><p>C++标准库的书中，曾经说过这么一句话</p>
<pre><code>唯一一种方便的使用模板类的方法是用内联函数的方式在头文件中一次性实现。
</code></pre><h3 id="为什么呢？"><a href="#为什么呢？" class="headerlink" title="为什么呢？"></a>为什么呢？</h3><p>对于一个模板类，编译器在实例化的时候，通过模板类的参数，会创建一个新的类，举个例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     T bar;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(T param)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// somewhere in a .cpp</span></span><br><span class="line">Foo&lt;<span class="keyword">int</span>&gt; f; </span><br></pre></td></tr></table></figure>
<p>当编译器读到下面这一行的时候，就会创建一个新的类，我们可以把它叫做FooInt，这个类的实现等价于下面这种模式：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FooInt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     <span class="keyword">int</span> bar;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> param)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，编译器开始需要去实现里面类的方法，自然是通过模板的参数来实现它们。如果这些实现不在头文件里面，编译器就无法获取到这些模板，自然就无法实现模板类的方法了。</p>
<hr>
<h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>当然，将函数的声明和实现放在多个文件中，有时候是非常有必要的，简洁，条理，或者强迫症。。。<br>一种简单的解决方案是在头文件中声明类的方法之后，把类的实现写在文件B中，然后再头文件中include文件B，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Foo.h中声明；</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(T param)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//include 实现的文件；</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Foo.tpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Foo.tpp中实现函数；</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Foo&lt;T&gt;::doSomething(T param)</span><br><span class="line">&#123;</span><br><span class="line">   	<span class="comment">//implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>哈哈，这是一种十分取巧的方法，不过也达到了目的，而且效果拔群。<br>还有一种方法，感觉上就不是很推荐了，但是更加正常一些。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo.h</span></span><br><span class="line"><span class="comment">// no implementation</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span> ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo.cpp</span></span><br><span class="line"><span class="comment">// implementation of Foo's methods</span></span><br><span class="line"><span class="comment">// explicit instantiations</span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;int&gt;;</span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;float&gt;;</span></span><br></pre></td></tr></table></figure>
<p>这种方法就是在cpp文件中，实现的模板类的函数之后，在文件中同时将你想要使用的模板参数，明确的实例化出来。  </p>
<p>本人还是比较喜欢第一种，毕竟  </p>
<pre><code>1.我不喜欢一个模板类实现在一个文件里，过长的文件真得太受不了了。
2.第二种方法也就必须把所有的模板类函数实现在一个文件里！
</code></pre><p>博文翻译于<a href="http://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file" target="_blank" rel="noopener">stackoverflow</a>.</p>
<h4 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h4><p>可以看下答主推荐的<a href="https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl" target="_blank" rel="noopener">文章</a></p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 踩坑日记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[译]solr boolean operators]]></title>
      <url>/2015/09/23/%E8%AF%91-solr-boolean-operators/</url>
      <content type="html"><![CDATA[<h2 id="踩坑感言："><a href="#踩坑感言：" class="headerlink" title="踩坑感言："></a>踩坑感言：</h2><p>这个故事告诉我，<strong>做事情不要想当然</strong>，你觉得的事情，一定不是对的。</p>
<hr>
<h2 id="译文原文："><a href="#译文原文：" class="headerlink" title="译文原文："></a>译文原文：</h2><p>来自于<a href="http://robotlibrarian.billdueber.com/2011/12/solr-and-boolean-operators/" target="_blank" rel="noopener">Bill Dueber</a>.</p>
<hr>
<h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><p>在Solr中一定要用括号去管理优先级！！！</p>
<hr>
<h6 id="搞起搞起！"><a href="#搞起搞起！" class="headerlink" title="搞起搞起！"></a>搞起搞起！</h6><p>用过Solr的同学知道一下查询，Solr是怎么做的么？</p>
<pre><code>a OR b AND C
</code></pre><p>我可以给你三种选择，但是前两种肯定是错误的，而且你也不会想到第三种，因此还是不要花费太多的时间去想吧。</p>
<h3 id="boolean运算符的优先级"><a href="#boolean运算符的优先级" class="headerlink" title="boolean运算符的优先级"></a>boolean运算符的优先级</h3><p>如果你曾经知道过boolean运算相关的知识，你坑定为知道一个严格意义上的顺序，那就是NOT&gt;AND&gt;OR，因此，可能就会使下面一种执行顺序：</p>
<pre><code>a OR (b AND c)
</code></pre><p>这是猜想答案的一种，但是Solr不是这么做的。</p>
<h3 id="从左到右？"><a href="#从左到右？" class="headerlink" title="从左到右？"></a>从左到右？</h3><p>部分本地的学生，或者说也有至少一门编程语言，用的是简单的从左到右的执行方法，因此，就会有如下的一种执行顺序：</p>
<pre><code>（a OR b) AND c
</code></pre><p>不幸的是，这个还是错的。</p>
<h3 id="那么还有什么答案呢？"><a href="#那么还有什么答案呢？" class="headerlink" title="那么还有什么答案呢？"></a>那么还有什么答案呢？</h3><p>正确的执行顺序可以用如下的代码来表示，待会再通过lucene的查询分析来解释下：</p>
<pre><code>（b AND c）
</code></pre><p>在这里，第一个判断被抛弃了！也就是说，第一个判断其实是可有可无的！</p>
<h3 id="你还会让你的使用者将AND-OR-NOT放在他们的查询里么？"><a href="#你还会让你的使用者将AND-OR-NOT放在他们的查询里么？" class="headerlink" title="你还会让你的使用者将AND/OR/NOT放在他们的查询里么？"></a>你还会让你的使用者将AND/OR/NOT放在他们的查询里么？</h3><p>但愿他们并不知道什么是boolean运算；如果他们知道，但愿他们会使用括号，或者你可以帮他们判断出来，不然，他们将会死得很惨。。。。</p>
<h3 id="更多的测试"><a href="#更多的测试" class="headerlink" title="更多的测试"></a>更多的测试</h3><p>我在Solr(3.5)的里面测试下所有可以的情况（用的是curly，larry，moe和shemp的排序）总共有15种情况。</p>
<p>我写了个脚本来跑这些情况，分别在lucene和edismax下，看看可以得到什么样的结果。所有的测试中，lucene的默认运算符是AND，edismax的mm参数设置为100%</p>
<pre><code>Lucene                    EDismax
</code></pre><hr>
<ol>
<li>curly AND larry</li>
</ol>
<pre><code>curly larry               curly larry
curly larry moe           curly larry moe
curly larry shemp         curly larry shemp
curly larry moe shemp     curly larry moe shemp
</code></pre><ol>
<li>curly AND larry OR moe</li>
</ol>
<pre><code>curly                     curly larry
curly larry               curly larry moe
curly moe                 curly larry shemp
curly shemp               curly larry moe shemp
curly larry moe
curly larry shemp
curly moe shemp
curly larry moe shemp
</code></pre><ol>
<li>curly OR larry AND moe</li>
</ol>
<pre><code>larry moe                 larry moe
curly larry moe           curly larry moe
larry moe shemp           larry moe shemp
curly larry moe shemp     curly larry moe shemp
</code></pre><ol>
<li>curly AND larry OR moe AND shemp</li>
</ol>
<pre><code>curly moe shemp           curly larry moe shemp
curly larry moe shemp
</code></pre><ol>
<li>moe AND shemp OR curly AND larry</li>
</ol>
<pre><code>curly larry moe           curly larry moe shemp
curly larry moe shemp
</code></pre><p>查询1的答案是在预想中的。查询2的答案中，明显的就发现在lucene查询器下只有有’curly’就可以了，而在edismax下就需要’curly AND larry’（查询3一样的是变成了’larry AND moe’）。查询4和查询5也是同样的道理。当然，你可以看下debug查询输出，来知道她们是什么样的运行结果，但是没有告诉我为什么。</p>
<h3 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h3><p>好消息就是，不论是lucene还是edismax，在用括号的时候，她们的答案都是显而易见的。<br>在lucene-167cene的缺陷管理中也确实提到了这个问题(<a href="https://issues.apache.org/jira/browse/LUCENE-167" target="_blank" rel="noopener">Lucene-167</a>,<a href="https://issues.apache.org/jira/browse/LUCENE-1823" target="_blank" rel="noopener">lucene-1823</a>)，而在<a href="http://www.mail-archive.com/java-user@lucene.apache.org/msg00008.html" target="_blank" rel="noopener">2005 mailling list thread</a>中也指出也这种现象，但是它还是仍旧存在。</p>
<p>~~~</p>
<p>还是老老实实的用上括号吧，以免再入坑！</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> solr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博文]]></title>
      <url>/2015/09/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
      <content type="html"><![CDATA[<p>你好，世界</p>
<hr>
<p>今天是拿到mac的第二天，兑现我的承诺，开始写属于自己的文字。</p>
<p>人类总是任性和懒惰，多么好的条件都不会造就一个人，也就是<strong>生于忧患，死于安乐</strong>吧。</p>
<p>好好奋斗，人生才刚刚开始。</p>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 起点 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
